{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1429758904528},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1429758904528},{"_id":"themes/jacman/README.md","hash":"ea52694ca940f7a8c0d9f9be0d653904dbe53819","modified":1429758904529},{"_id":"themes/jacman/README_zh.md","hash":"8cc4fc09bae6bb7a77f5405cca53c1581c39279d","modified":1429758904530},{"_id":"source/_posts/2015-04-23.md","hash":"53b0a311eaeae4486377b18d74a7f6679ed5501d","modified":1429772258476},{"_id":"source/_posts/2016年春学期回顾.md","hash":"4b2b7aac798e2203d8725d648c31017e10010611","modified":1462888888076},{"_id":"source/_posts/Array对象总结.md","hash":"b6b3ff2fb513a9a5963ae61c17b69372bb5a5ef9","modified":1459612096916},{"_id":"source/_posts/String对象总结.md","hash":"4c3742f2b0945196b107f6c278d513ca19c46364","modified":1459611601685},{"_id":"source/_posts/april-review.md","hash":"923b71cccdffd48f75a178cfe6fee40f63a422c4","modified":1430835486136},{"_id":"themes/jacman/_config.yml","hash":"fbc4c28db3c82e157a2633d6184af6bb8444a777","modified":1429773572089},{"_id":"source/_posts/distribution-network-reconfiguraton-with-HSA.md","hash":"37a46a833184853975d4468abd77fee9d2869090","modified":1429972463927},{"_id":"source/_posts/js-notes.md","hash":"5b007d847482ab5f539706621ec50065ba8ee9f4","modified":1429795590682},{"_id":"source/_posts/js-notes3.md","hash":"fd506af3efdc6a8e3125648eff21d662709b066b","modified":1459522122326},{"_id":"source/_posts/前端工作流的一些尝试.md","hash":"cc1f8cb8f63f56800da8a153b32370e3359558c4","modified":1462886367673},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1429758904517},{"_id":"themes/jacman/.git/config","hash":"b3a21db5b179edac7874b32200ec23ede61361fe","modified":1429758904521},{"_id":"source/about/index.md","hash":"805365cdff24d48e5cdd751a42047eb743c1b0b3","modified":1429771738605},{"_id":"themes/jacman/.git/index","hash":"8ba4bf7e2243842a624f2cec6e5aff3017084551","modified":1462886127431},{"_id":"themes/jacman/.git/packed-refs","hash":"0048ab467c39266e1773bab788e85ab03f0ff24e","modified":1429758904424},{"_id":"source/_posts/js-notes2.md","hash":"9bf5b3daa2f8d367487fb694428955e72b041b63","modified":1431243709232},{"_id":"themes/jacman/languages/default.yml","hash":"32efe172560cf8a50884d5d5237d654fb59f7df4","modified":1429758904531},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"afe99ffe436eabea1b6476e8dbd87c0797609afb","modified":1429758904531},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"7b83cc0450a68fc8b9d723ecc37d831a0c18c6ea","modified":1429758904531},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1429758904541},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1429758904541},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1429758904541},{"_id":"themes/jacman/layout/layout.ejs","hash":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1429758904542},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1429758904542},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1429758904542},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1429758904543},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1429758904543},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1429758886050},{"_id":"source/_posts/js-notes4.md","hash":"2ce52e13ec7dd8dc466a64739cb55cd117b09556","modified":1431354149841},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1429758886080},{"_id":"themes/jacman/.git/hooks/post-commit.sample","hash":"856215503a9078b2689cb25c3c162de5d367a5ef","modified":1429758886081},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1429758886082},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1429758886083},{"_id":"themes/jacman/.git/hooks/post-receive.sample","hash":"3b7c48fec47649f6c400fae6ccfa7f266f909b89","modified":1429758886082},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1429758886081},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1429758886085},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1429758886084},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1429758886086},{"_id":"themes/jacman/.git/logs/HEAD","hash":"f8a41767717b2691cfa8cac38d529f98bd276b9d","modified":1429758904519},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"8173a653861d4fae67b827aaf44a6f1c75bd3459","modified":1429758904532},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"5cb06f9d23b92815ff77766b894421e1037505f8","modified":1429758904532},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1429758904532},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1429758904533},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1429758904534},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1429758886083},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1429758904533},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"b97f94b13b545af19e3b381732d4a37e91368ef8","modified":1429758904533},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1429758904534},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1429758904535},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1429758904538},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1429758886083},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1429758904538},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1429758904538},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1429758904538},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1429758904538},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1429758904539},{"_id":"themes/jacman/layout/_widget/blogroll.ejs","hash":"c5b81797e917d85db5d7ae03e338c1b9bbc350b5","modified":1429772580805},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1429758904539},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e0b545c996fac814885861a01113387ad8469ac2","modified":1429758904539},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1429758904539},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1429758904539},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1429758904540},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1429758904540},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1429758904540},{"_id":"themes/jacman/source/css/style.styl","hash":"98019eb8d70618259928c3472f9b17568848c794","modified":1429758904548},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1429758904549},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1429758904549},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1429758904549},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1429758904550},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1429758904550},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1429758904551},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1429758904554},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1429758904555},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1429758904555},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1429758904556},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1429758904557},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1429758904559},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1429758904559},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1429758904560},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1429758904563},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1429758904564},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1429758904565},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1429758904566},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"6c674c895091c8a854be67fe8a556008ddc767f3","modified":1431498077217},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"c59b06139ce307c40388fee40532e04a014aa7af","modified":1431497306523},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1429758904568},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1429758904569},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1429758904569},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1429758904569},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1429758904570},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1429758904570},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1429758904570},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1429758904571},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1429758904571},{"_id":"themes/jacman/source/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1429758904571},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1429758904572},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1429758904572},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1429758904573},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1429758904574},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1429758904558},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1429758904562},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1429758904565},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1429758904571},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1429758904573},{"_id":"themes/jacman/.git/objects/pack/pack-1b36028e0c23f360ec5a53d131d2db1b9833d05e.idx","hash":"51337a0d70661b96d97458239c49123e6cc55e33","modified":1429758904122},{"_id":"themes/jacman/.git/refs/heads/master","hash":"6afad8a6f409cb823e445991e2f596d12c812b21","modified":1429758904518},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1429758904535},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1429758904535},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1429758904535},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1429758904536},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1429758904536},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1429758904537},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1429758904536},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1429758904537},{"_id":"themes/jacman/source/css/_base/code.styl","hash":"0eb8825710b573f3f444c4c90933211bfe531078","modified":1429758904544},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"657ad4c267490bd3b9ac98b5f864ecddb7025586","modified":1429758904545},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1429758904544},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1429758904545},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1429758904546},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"6c303908a7af7234ba032ef9e1189b68ae492f22","modified":1429758904546},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1429758904546},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1429758904547},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1429758904547},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1429758904548},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"bdf04e4b4521a80e883173a77be0ff772277a4a1","modified":1429758904548},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"d5a3046587f42703224ac3b761e80baab35d4ccc","modified":1429758904548},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1429758904548},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1429758904551},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1429758904551},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1429758904552},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1429758904553},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1429758904553},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1429758904553},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1429758886085},{"_id":"themes/jacman/source/img/author.jpg","hash":"39eea9854526ce80271ce8f1b7f4c3edcc68953c","modified":1399396452000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1429758904561},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1429758904568},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1429758904515},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"f8a41767717b2691cfa8cac38d529f98bd276b9d","modified":1429758904519},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"f8a41767717b2691cfa8cac38d529f98bd276b9d","modified":1429758904517},{"_id":"themes/jacman/.git/objects/pack/pack-1b36028e0c23f360ec5a53d131d2db1b9833d05e.pack","hash":"9b0a4a7947f3d75eb43803ac2aa4aecaa9fb10e1","modified":1429758904320},{"_id":"public/about/index.html","hash":"9f2ca39f6daf3274fcd25c232048591a1c0fbbde","modified":1462888907479},{"_id":"public/2015/04/25/distribution-network-reconfiguraton-with-HSA/index.html","hash":"96b38b6721999b501e007718ab96835234e0cdce","modified":1462888907517},{"_id":"public/2015/04/23/2015-04-23/index.html","hash":"ed34c0cd0a36adafd8aaef47b6eed7c42c99ad7a","modified":1462888907518},{"_id":"public/archives/index.html","hash":"ddcbe6f30cffc884a08b51725f883a0d917fd0ed","modified":1462888907519},{"_id":"public/archives/2015/index.html","hash":"4a392e9f01700bb7972fd30de21a236ee8bb04b8","modified":1462888907519},{"_id":"public/archives/2015/04/index.html","hash":"86e5dbb5d0b61e4d276fb1aaae7f2e1cab6775a6","modified":1462888907519},{"_id":"public/archives/2015/05/index.html","hash":"425813d09ea90dd3c3def76b126f9c85cc79b9e5","modified":1462888907519},{"_id":"public/archives/2016/index.html","hash":"b46b1aaf9a99e56f881e8127a08f272446e94268","modified":1462888907520},{"_id":"public/archives/2016/03/index.html","hash":"64b0c2cb052121f296bf976ebb6939d5e342130b","modified":1462888907520},{"_id":"public/archives/2016/04/index.html","hash":"4bb06e3554743d5ff15815300e1cf0c68a5c01e4","modified":1462888907520},{"_id":"public/categories/前端/index.html","hash":"b62b171b3a3a7ba13b5032b5e4244ed4f3527cf7","modified":1462888907520},{"_id":"public/tags/日记/index.html","hash":"ecebb2e9ce426027b1a10e4168f7ec17d18b790a","modified":1462888907520},{"_id":"public/tags/webpack/index.html","hash":"e813c7ed7575b2988aed6cb0f8e3a0b3065eb279","modified":1462888907520},{"_id":"public/tags/js/index.html","hash":"c8a39055b64cef7ef82450b3c1425241a9319d8e","modified":1462888907520},{"_id":"public/tags/note/index.html","hash":"09597e6968f810c92ab7e292a9216c040194437e","modified":1462888907520},{"_id":"public/tags/电力/index.html","hash":"52827acdd41d7ea7bb65b62ab124549d01dd033b","modified":1462888907520},{"_id":"public/tags/配电网/index.html","hash":"d550b74653fcdaf0aff1904219ab94d217e605e8","modified":1462888907520},{"_id":"public/tags/算法/index.html","hash":"05a55813a7b1370288794c3fbca312c43b41a415","modified":1462888907520},{"_id":"public/tags/工程化/index.html","hash":"d7fb662bdec469e989ca9610287d158e459e93f6","modified":1462888907521},{"_id":"public/tags/gulp/index.html","hash":"11bd2cc1139ece48127bc2e93c0d138c338f7be1","modified":1462888907521},{"_id":"public/2016/04/02/Array对象总结/index.html","hash":"e926b2cc62b0c936476aafedefa1ebac8854320b","modified":1462888907521},{"_id":"public/2016/04/01/String对象总结/index.html","hash":"e7bd1b080991dbf6e65f5b5c721e791943f3f8c4","modified":1462888907521},{"_id":"public/2016/03/27/前端工作流的一些尝试/index.html","hash":"be243f8883a4aea726faf60f47b680d25564c565","modified":1462888907521},{"_id":"public/2015/05/11/js-notes4/index.html","hash":"8bf68c449b90e562b745dbec271531dfd7a844b6","modified":1462888907521},{"_id":"public/2015/05/10/js-notes3/index.html","hash":"c1de156862bfa8f0c663725dddeba7864219da8f","modified":1462888907521},{"_id":"public/2015/05/08/js-notes2/index.html","hash":"28472ec5b04b5ccabb8b710213c094adb546b567","modified":1462888907521},{"_id":"public/2015/05/05/april-review/index.html","hash":"7b3d581622bac726ce4b724611578a207d3974af","modified":1462888907521},{"_id":"public/2015/04/23/js-notes/index.html","hash":"305aec35554c624f90dd0585e5a97697f1c41a48","modified":1462888907521},{"_id":"public/index.html","hash":"ff9e2e177db02901570cfb5afc1f0dd1870f14eb","modified":1462888907521},{"_id":"public/archives/2016/05/index.html","hash":"be91a81bcd272b6c7b657d9d41bea301e4f69fd6","modified":1462888907529},{"_id":"public/categories/前端/日记/index.html","hash":"11744c661b536eb498892dd62e7830975d87096f","modified":1462888907529},{"_id":"public/page/2/index.html","hash":"8c1750d46c957037f31e9049e7637a5a7fc49408","modified":1462888907529},{"_id":"public/tags/Redux/index.html","hash":"a9ccd1380ea15489db1f0c950a7fb5fa597499df","modified":1462888907529},{"_id":"public/tags/React/index.html","hash":"0a1bf8078f5b6d9feb9c040f8fc2c5fa9bdc9adb","modified":1462888907529},{"_id":"public/tags/ftp/index.html","hash":"14a034a16beb740b8eee565acdf8b174c0366db3","modified":1462888907529},{"_id":"public/tags/node/index.html","hash":"66f3f5ff64c8341e6f4fb527512760bcd0bb6a99","modified":1462888907529},{"_id":"public/2016/05/10/2016年春学期回顾/index.html","hash":"d75997d36019f446354f70377b004a7865dca8d1","modified":1462888907529},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462888907534},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462888907535},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462888907535},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462888907535},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462888907535},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462888907535},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1462888907535},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1462888907535},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1462888907535},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1462888907535},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1462888907535},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1462888907535},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1462888907535},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1462888907536},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1462888907536},{"_id":"public/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1462888907536},{"_id":"public/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1462888907537},{"_id":"public/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1462888907537},{"_id":"public/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1462888907537},{"_id":"public/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1462888907537},{"_id":"public/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1462888907537},{"_id":"public/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1462888907537},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1462888907537},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1462888907537},{"_id":"public/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1462888907537},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1462888907537},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462888907537},{"_id":"public/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1462888911022},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1462888911024},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1462888911025},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1462888911025},{"_id":"public/img/author.jpg","hash":"39eea9854526ce80271ce8f1b7f4c3edcc68953c","modified":1462888911025},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1462888911033},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1462888911033},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1462888911033},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1462888911033},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1462888911033},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462888911033},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1462888911034},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1462888911034},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462888911034},{"_id":"public/css/style.css","hash":"d2eee82a731151e12d94b52aca10ff6d64da41da","modified":1462888911034},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1462888911034},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1462888911034},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1462888911034},{"_id":"public/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1462888911199},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1462888911199}],"Category":[{"name":"前端","_id":"cio1ia83g00055gbb49h223yp"},{"name":"日记","parent":"cio1ia83g00055gbb49h223yp","_id":"cio1ia842000k5gbb04axr8f3"}],"Data":[],"Page":[{"title":"about","date":"2015-04-23T06:48:16.000Z","_content":"this is about","source":"about/index.md","raw":"title: \"about\"\ndate: 2015-04-23 14:48:16\n---\nthis is about","updated":"2015-04-23T06:48:58.605Z","path":"about/index.html","comments":1,"layout":"page","_id":"cio1ia83700015gbb0kvuqnpf","content":"<p>this is about</p>\n","excerpt":"","more":"<p>this is about</p>\n"}],"Post":[{"title":"2015-04-23","date":"2015-04-23T06:37:15.000Z","_content":"#最近主要在做三件事\n\n* 百度IFE\n\nhttps://github.com/baidu-ife/ife\n\n* 宁波RDS\n\n下周甲方过来汇报\n\n* 配网论文\n\n月底提交，打算投电网吧，希望能在这学期搞定第一篇EI。","source":"_posts/2015-04-23.md","raw":"title: \"2015-04-23\"\ndate: 2015-04-23 14:37:15\ntags: [日记]\n---\n#最近主要在做三件事\n\n* 百度IFE\n\nhttps://github.com/baidu-ife/ife\n\n* 宁波RDS\n\n下周甲方过来汇报\n\n* 配网论文\n\n月底提交，打算投电网吧，希望能在这学期搞定第一篇EI。","slug":"2015-04-23","published":1,"updated":"2015-04-23T06:57:38.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83200005gbbshifsj64","content":"<p>#最近主要在做三件事</p>\n<ul>\n<li>百度IFE</li>\n</ul>\n<p><a href=\"https://github.com/baidu-ife/ife\" target=\"_blank\" rel=\"external\">https://github.com/baidu-ife/ife</a></p>\n<ul>\n<li>宁波RDS</li>\n</ul>\n<p>下周甲方过来汇报</p>\n<ul>\n<li>配网论文</li>\n</ul>\n<p>月底提交，打算投电网吧，希望能在这学期搞定第一篇EI。</p>\n","excerpt":"","more":"<p>#最近主要在做三件事</p>\n<ul>\n<li>百度IFE</li>\n</ul>\n<p><a href=\"https://github.com/baidu-ife/ife\">https://github.com/baidu-ife/ife</a></p>\n<ul>\n<li>宁波RDS</li>\n</ul>\n<p>下周甲方过来汇报</p>\n<ul>\n<li>配网论文</li>\n</ul>\n<p>月底提交，打算投电网吧，希望能在这学期搞定第一篇EI。</p>\n"},{"title":"2016年春学期回顾","date":"2016-05-10T13:18:16.000Z","_content":"\n说来又过了一个学期，匆匆忙忙好像也没有干出一些特别具体的事情。然而身边朋友多有收获，看着下不去的肚子和上不去的能力，不免唏嘘。\n\n过去一短时间生活上主要在搞足球和搞对象啦。好歹小组出线，小组赛全勤，也算一个不小的成就。但是仔细感觉，身体上并没有更加有力量感，反而不断被右膝盖的酸痛感困扰。回顾三场小组赛，印象最深的是对阵传媒，韩国小哥风一样的速度近乎于日本中村小友，踢完那场足足在床上躺了一天。大约童年缺钙，落下了如今这条给不上力量的右膝盖。其他两个球队多是找感觉，没啥好说的。\n\n其他时间主要在看看一些在线课程和书。\n\n之前发过一条朋友圈：\n\n>一开始只是想要写的快一点，于是有了React，后面又想跟上潮流，于是有了webpack、eslint，内容多一点于是有了Router和flux，后来发现还有一个Redux好像更装逼，于是噼里啪啦又加加加………\n\n大概也说明了自己在研究的一条技术栈，其实也就是：\n\n> `React` + `React-Router` + `Redux` + `Webpack` + `ES6`\n\n其实我还是挺喜欢写写代码的，不然真心觉得对不起这么贵的键盘，想来也是划算，千把块钱买个键盘大约能保持个两三年的打字的热情，千把块钱扔健身房里大概就能推个二十公斤。\n\n其实`React`去年就已经接触到，作为一个View层真的很方便，而且我有点愚钝，其实也因为涉及到项目规模太小，至今没能体会到`AngularJS`里面双向绑定出现的性能问题，不过当时赶时髦，还是研究了一段时间。对于`React`我唯一的感觉就是不如`AngularJS`里面的`directive`来的方便。打个比方，我想要做一个tabs，直接把ng的`directive`放在`ul`上就可以了，在`React`里面还是定义一两个组件才能完成，虽然核心的代码差不多，但是还是觉得略有多余。不过话又说回来，ng里面那一大堆`link`啊`compile`确实挺烦。\n\n后面为了管理数据，我从`Flux`切换到了`Redux`，还有一大堆中间件，特别对于中间件，到目前为止还搞得不是很清楚。最近做了一个很蠢的ftp的文件管理的应用，功能很傻，登录进去，读出ftp文件列表，文件夹可以继续点进去，文件可以下载（批量下载还没有尝试），在当前目录下可以实现批量文件上传。一开始想要通过浏览器的location来管理cwd，后来还是放弃了，自己写了cwd的reducer，手动来管理前进后退。\n\n还有一个觉得挺有意思的就是`webpack-dev-server`的`proxy`功能。说来也是丢人，感觉人家都在搞什么前后端分离啥的，我也没有那么高级的追求，就想着写代码时候，tomcat上面跑一个后台，webpack再跑一个前台，真方便。没有用`http-proxy`是因为今后可能还是主要用java来写后台，node上面就没有特别花心思。然后发现前面说到的`proxy`功能正好可以满足我想要的。折腾了好久，终于搞明白怎么弄，之前我一直傻不拉几的在`webpack`里面设置，有一点错误。而且`http-proxy`在转的时候，如果通过同一个server.js就会发现你其实还是在不断地重新webpack，还不如跑一个node后台，另外一个文件专门跑一个webpack-dev-server，这样重启node后台的时候并不会影响到前台，会方便很多。但是我在这方面上做的还是比较浅，如果说错了请各位指导。\n\n最后一个就是ftp的中文编码问题，因为ftp用的是iso-8859-1，java上面用`setControlEncoding`可以解决大部分的问题。然而在node上似乎大部分的包都没有考虑中文问题，`ftp`这个包里面都用了binary，读出来可以解码，但是搞了变天没法传中文进去。后来发现`jsftp`可以在`ftp.raw`的namespace下发ftp命令，这样就是可以通过`ftp.raw.opts('utf8 on', callback)`来传中文，相当方便，感觉在node上没有找到其他更好的方法，如果有大牛知道，务必请指点我一下。\n\n说来，过不了几个月就要找工作了，去本专业还是试一试当个初级码农，略有困惑，求个醍醐灌顶？请拍砖。","source":"_posts/2016年春学期回顾.md","raw":"\ntitle: 2016年春学期回顾\ntags:\n  - Redux\n  - React\n  - webpack\n  - ftp\n  - node\ncategories:\n  - 前端\n  - 日记\ndate: 2016-05-10 21:18:16\n---\n\n说来又过了一个学期，匆匆忙忙好像也没有干出一些特别具体的事情。然而身边朋友多有收获，看着下不去的肚子和上不去的能力，不免唏嘘。\n\n过去一短时间生活上主要在搞足球和搞对象啦。好歹小组出线，小组赛全勤，也算一个不小的成就。但是仔细感觉，身体上并没有更加有力量感，反而不断被右膝盖的酸痛感困扰。回顾三场小组赛，印象最深的是对阵传媒，韩国小哥风一样的速度近乎于日本中村小友，踢完那场足足在床上躺了一天。大约童年缺钙，落下了如今这条给不上力量的右膝盖。其他两个球队多是找感觉，没啥好说的。\n\n其他时间主要在看看一些在线课程和书。\n\n之前发过一条朋友圈：\n\n>一开始只是想要写的快一点，于是有了React，后面又想跟上潮流，于是有了webpack、eslint，内容多一点于是有了Router和flux，后来发现还有一个Redux好像更装逼，于是噼里啪啦又加加加………\n\n大概也说明了自己在研究的一条技术栈，其实也就是：\n\n> `React` + `React-Router` + `Redux` + `Webpack` + `ES6`\n\n其实我还是挺喜欢写写代码的，不然真心觉得对不起这么贵的键盘，想来也是划算，千把块钱买个键盘大约能保持个两三年的打字的热情，千把块钱扔健身房里大概就能推个二十公斤。\n\n其实`React`去年就已经接触到，作为一个View层真的很方便，而且我有点愚钝，其实也因为涉及到项目规模太小，至今没能体会到`AngularJS`里面双向绑定出现的性能问题，不过当时赶时髦，还是研究了一段时间。对于`React`我唯一的感觉就是不如`AngularJS`里面的`directive`来的方便。打个比方，我想要做一个tabs，直接把ng的`directive`放在`ul`上就可以了，在`React`里面还是定义一两个组件才能完成，虽然核心的代码差不多，但是还是觉得略有多余。不过话又说回来，ng里面那一大堆`link`啊`compile`确实挺烦。\n\n后面为了管理数据，我从`Flux`切换到了`Redux`，还有一大堆中间件，特别对于中间件，到目前为止还搞得不是很清楚。最近做了一个很蠢的ftp的文件管理的应用，功能很傻，登录进去，读出ftp文件列表，文件夹可以继续点进去，文件可以下载（批量下载还没有尝试），在当前目录下可以实现批量文件上传。一开始想要通过浏览器的location来管理cwd，后来还是放弃了，自己写了cwd的reducer，手动来管理前进后退。\n\n还有一个觉得挺有意思的就是`webpack-dev-server`的`proxy`功能。说来也是丢人，感觉人家都在搞什么前后端分离啥的，我也没有那么高级的追求，就想着写代码时候，tomcat上面跑一个后台，webpack再跑一个前台，真方便。没有用`http-proxy`是因为今后可能还是主要用java来写后台，node上面就没有特别花心思。然后发现前面说到的`proxy`功能正好可以满足我想要的。折腾了好久，终于搞明白怎么弄，之前我一直傻不拉几的在`webpack`里面设置，有一点错误。而且`http-proxy`在转的时候，如果通过同一个server.js就会发现你其实还是在不断地重新webpack，还不如跑一个node后台，另外一个文件专门跑一个webpack-dev-server，这样重启node后台的时候并不会影响到前台，会方便很多。但是我在这方面上做的还是比较浅，如果说错了请各位指导。\n\n最后一个就是ftp的中文编码问题，因为ftp用的是iso-8859-1，java上面用`setControlEncoding`可以解决大部分的问题。然而在node上似乎大部分的包都没有考虑中文问题，`ftp`这个包里面都用了binary，读出来可以解码，但是搞了变天没法传中文进去。后来发现`jsftp`可以在`ftp.raw`的namespace下发ftp命令，这样就是可以通过`ftp.raw.opts('utf8 on', callback)`来传中文，相当方便，感觉在node上没有找到其他更好的方法，如果有大牛知道，务必请指点我一下。\n\n说来，过不了几个月就要找工作了，去本专业还是试一试当个初级码农，略有困惑，求个醍醐灌顶？请拍砖。","slug":"2016年春学期回顾","published":1,"updated":"2016-05-10T14:01:28.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83900025gbbdrgayj2d","content":"<p>说来又过了一个学期，匆匆忙忙好像也没有干出一些特别具体的事情。然而身边朋友多有收获，看着下不去的肚子和上不去的能力，不免唏嘘。</p>\n<p>过去一短时间生活上主要在搞足球和搞对象啦。好歹小组出线，小组赛全勤，也算一个不小的成就。但是仔细感觉，身体上并没有更加有力量感，反而不断被右膝盖的酸痛感困扰。回顾三场小组赛，印象最深的是对阵传媒，韩国小哥风一样的速度近乎于日本中村小友，踢完那场足足在床上躺了一天。大约童年缺钙，落下了如今这条给不上力量的右膝盖。其他两个球队多是找感觉，没啥好说的。</p>\n<p>其他时间主要在看看一些在线课程和书。</p>\n<p>之前发过一条朋友圈：</p>\n<blockquote>\n<p>一开始只是想要写的快一点，于是有了React，后面又想跟上潮流，于是有了webpack、eslint，内容多一点于是有了Router和flux，后来发现还有一个Redux好像更装逼，于是噼里啪啦又加加加………</p>\n</blockquote>\n<p>大概也说明了自己在研究的一条技术栈，其实也就是：</p>\n<blockquote>\n<p><code>React</code> + <code>React-Router</code> + <code>Redux</code> + <code>Webpack</code> + <code>ES6</code></p>\n</blockquote>\n<p>其实我还是挺喜欢写写代码的，不然真心觉得对不起这么贵的键盘，想来也是划算，千把块钱买个键盘大约能保持个两三年的打字的热情，千把块钱扔健身房里大概就能推个二十公斤。</p>\n<p>其实<code>React</code>去年就已经接触到，作为一个View层真的很方便，而且我有点愚钝，其实也因为涉及到项目规模太小，至今没能体会到<code>AngularJS</code>里面双向绑定出现的性能问题，不过当时赶时髦，还是研究了一段时间。对于<code>React</code>我唯一的感觉就是不如<code>AngularJS</code>里面的<code>directive</code>来的方便。打个比方，我想要做一个tabs，直接把ng的<code>directive</code>放在<code>ul</code>上就可以了，在<code>React</code>里面还是定义一两个组件才能完成，虽然核心的代码差不多，但是还是觉得略有多余。不过话又说回来，ng里面那一大堆<code>link</code>啊<code>compile</code>确实挺烦。</p>\n<p>后面为了管理数据，我从<code>Flux</code>切换到了<code>Redux</code>，还有一大堆中间件，特别对于中间件，到目前为止还搞得不是很清楚。最近做了一个很蠢的ftp的文件管理的应用，功能很傻，登录进去，读出ftp文件列表，文件夹可以继续点进去，文件可以下载（批量下载还没有尝试），在当前目录下可以实现批量文件上传。一开始想要通过浏览器的location来管理cwd，后来还是放弃了，自己写了cwd的reducer，手动来管理前进后退。</p>\n<p>还有一个觉得挺有意思的就是<code>webpack-dev-server</code>的<code>proxy</code>功能。说来也是丢人，感觉人家都在搞什么前后端分离啥的，我也没有那么高级的追求，就想着写代码时候，tomcat上面跑一个后台，webpack再跑一个前台，真方便。没有用<code>http-proxy</code>是因为今后可能还是主要用java来写后台，node上面就没有特别花心思。然后发现前面说到的<code>proxy</code>功能正好可以满足我想要的。折腾了好久，终于搞明白怎么弄，之前我一直傻不拉几的在<code>webpack</code>里面设置，有一点错误。而且<code>http-proxy</code>在转的时候，如果通过同一个server.js就会发现你其实还是在不断地重新webpack，还不如跑一个node后台，另外一个文件专门跑一个webpack-dev-server，这样重启node后台的时候并不会影响到前台，会方便很多。但是我在这方面上做的还是比较浅，如果说错了请各位指导。</p>\n<p>最后一个就是ftp的中文编码问题，因为ftp用的是iso-8859-1，java上面用<code>setControlEncoding</code>可以解决大部分的问题。然而在node上似乎大部分的包都没有考虑中文问题，<code>ftp</code>这个包里面都用了binary，读出来可以解码，但是搞了变天没法传中文进去。后来发现<code>jsftp</code>可以在<code>ftp.raw</code>的namespace下发ftp命令，这样就是可以通过<code>ftp.raw.opts(&#39;utf8 on&#39;, callback)</code>来传中文，相当方便，感觉在node上没有找到其他更好的方法，如果有大牛知道，务必请指点我一下。</p>\n<p>说来，过不了几个月就要找工作了，去本专业还是试一试当个初级码农，略有困惑，求个醍醐灌顶？请拍砖。</p>\n","excerpt":"","more":"<p>说来又过了一个学期，匆匆忙忙好像也没有干出一些特别具体的事情。然而身边朋友多有收获，看着下不去的肚子和上不去的能力，不免唏嘘。</p>\n<p>过去一短时间生活上主要在搞足球和搞对象啦。好歹小组出线，小组赛全勤，也算一个不小的成就。但是仔细感觉，身体上并没有更加有力量感，反而不断被右膝盖的酸痛感困扰。回顾三场小组赛，印象最深的是对阵传媒，韩国小哥风一样的速度近乎于日本中村小友，踢完那场足足在床上躺了一天。大约童年缺钙，落下了如今这条给不上力量的右膝盖。其他两个球队多是找感觉，没啥好说的。</p>\n<p>其他时间主要在看看一些在线课程和书。</p>\n<p>之前发过一条朋友圈：</p>\n<blockquote>\n<p>一开始只是想要写的快一点，于是有了React，后面又想跟上潮流，于是有了webpack、eslint，内容多一点于是有了Router和flux，后来发现还有一个Redux好像更装逼，于是噼里啪啦又加加加………</p>\n</blockquote>\n<p>大概也说明了自己在研究的一条技术栈，其实也就是：</p>\n<blockquote>\n<p><code>React</code> + <code>React-Router</code> + <code>Redux</code> + <code>Webpack</code> + <code>ES6</code></p>\n</blockquote>\n<p>其实我还是挺喜欢写写代码的，不然真心觉得对不起这么贵的键盘，想来也是划算，千把块钱买个键盘大约能保持个两三年的打字的热情，千把块钱扔健身房里大概就能推个二十公斤。</p>\n<p>其实<code>React</code>去年就已经接触到，作为一个View层真的很方便，而且我有点愚钝，其实也因为涉及到项目规模太小，至今没能体会到<code>AngularJS</code>里面双向绑定出现的性能问题，不过当时赶时髦，还是研究了一段时间。对于<code>React</code>我唯一的感觉就是不如<code>AngularJS</code>里面的<code>directive</code>来的方便。打个比方，我想要做一个tabs，直接把ng的<code>directive</code>放在<code>ul</code>上就可以了，在<code>React</code>里面还是定义一两个组件才能完成，虽然核心的代码差不多，但是还是觉得略有多余。不过话又说回来，ng里面那一大堆<code>link</code>啊<code>compile</code>确实挺烦。</p>\n<p>后面为了管理数据，我从<code>Flux</code>切换到了<code>Redux</code>，还有一大堆中间件，特别对于中间件，到目前为止还搞得不是很清楚。最近做了一个很蠢的ftp的文件管理的应用，功能很傻，登录进去，读出ftp文件列表，文件夹可以继续点进去，文件可以下载（批量下载还没有尝试），在当前目录下可以实现批量文件上传。一开始想要通过浏览器的location来管理cwd，后来还是放弃了，自己写了cwd的reducer，手动来管理前进后退。</p>\n<p>还有一个觉得挺有意思的就是<code>webpack-dev-server</code>的<code>proxy</code>功能。说来也是丢人，感觉人家都在搞什么前后端分离啥的，我也没有那么高级的追求，就想着写代码时候，tomcat上面跑一个后台，webpack再跑一个前台，真方便。没有用<code>http-proxy</code>是因为今后可能还是主要用java来写后台，node上面就没有特别花心思。然后发现前面说到的<code>proxy</code>功能正好可以满足我想要的。折腾了好久，终于搞明白怎么弄，之前我一直傻不拉几的在<code>webpack</code>里面设置，有一点错误。而且<code>http-proxy</code>在转的时候，如果通过同一个server.js就会发现你其实还是在不断地重新webpack，还不如跑一个node后台，另外一个文件专门跑一个webpack-dev-server，这样重启node后台的时候并不会影响到前台，会方便很多。但是我在这方面上做的还是比较浅，如果说错了请各位指导。</p>\n<p>最后一个就是ftp的中文编码问题，因为ftp用的是iso-8859-1，java上面用<code>setControlEncoding</code>可以解决大部分的问题。然而在node上似乎大部分的包都没有考虑中文问题，<code>ftp</code>这个包里面都用了binary，读出来可以解码，但是搞了变天没法传中文进去。后来发现<code>jsftp</code>可以在<code>ftp.raw</code>的namespace下发ftp命令，这样就是可以通过<code>ftp.raw.opts(&#39;utf8 on&#39;, callback)</code>来传中文，相当方便，感觉在node上没有找到其他更好的方法，如果有大牛知道，务必请指点我一下。</p>\n<p>说来，过不了几个月就要找工作了，去本专业还是试一试当个初级码农，略有困惑，求个醍醐灌顶？请拍砖。</p>\n"},{"title":"Array对象总结","date":"2016-04-02T06:34:32.000Z","_content":"\n## 概述\n\n`Array对象`用于在单个的变量中存储多个值。\n\n## 创建\n\n* `new Array()` 返回一个空数组，length字段为0\n* `new Array(size)` 返回一个非空数组，其元素为size个undifined\n* `new Array(ele0,ele1,ele2,...,elen)`返回一个非空数组，其元素为`ele0,ele1,ele2,...,elen`\n* `Array()` 将其作为函数调用时，效果与使用new运算符将其当做构造函数来调用时的效果一样\n* `[ele0,ele1,ele2,...,elen]` 当然这样用是最常用的\n\n## 属性\n\n* `constructor` 返回对创建次对象的数组函数的引用\n* `length` **设置**或返回数组中元素的数目\n* `prototype` 向`Array对象`添加属性和方法\n\n其中，值得注意的是`length`属性，不仅可以取得当前`Array对象`中元素的数目，也可以设置当前`Array对象`可以容纳元素的数目，如果设置其length值小于当前的对象的元素数目，则会删去超出长度的元素。\n\n```\nlet arr = new Arrary(1,2,3);\nconsole.log(arr.length, arr);\narr.length = 2;\nconsole.log(arr.length, arr);\n//2 [1, 2]\narr.length = -1;\n//invalid array length\n```\n\n## 方法\n\n主要分为3类：\n\n* 数组操作\n* 数组递归\n* 数组查找\n* 数组遍历\n\n### 数组操作\n\n|方法|描述|\n|:--|:--|\n|`concat()`|在原`Array对象`的基础上连接新的`Array对象`，返回一个新的`Array对象`，和`String对象`的`concat()`实现类似功能|\n|`copyWithin(target,start,end)`|在`Array对象`内进行复制，从start位置开始，在end（缺省为数组尾）位置*前*结束，复制到target位置，溢出忽略|\n|`fill(value,start,end)`|在`Array对象`内进行批量赋值，从start位置（缺省为0）开始，在end（缺省为数组尾）位置*前*结束|\n|`Array.isArray()`|判断一个数组是否是`Array对象`|\n|`join(separator)`|将数组中元素间隔着separator连接为一个字符串|\n|`pop()`|删除数组中最后一个元素，返回该元素|\n|`push()`|在数组尾中存入若干个元素（多个参数），返回元素的长度|\n|`reverse()`|逆序数组，改变数组值，返回该数组|\n|`shift()`|删除数组中第一个元素，，返回该元素|\n|`slice(start,end)`|取数组中start到end（缺省为元素尾，不包括）之前的元素，负值表示从元素尾取值|\n|`sort(compareFunction)`|缺省按字符串的字符升序排序，compareFunction为递归函数，返回值负值者在前|\n|`splice(index,howmany,item1,.....,itemX)`|若howmany为0则在index位置开始插入，若howmany为正则从index开始删除后在index位置开始插入。因此可以在数组中任意位置插入，删除（无item）元素|\n|`toString()`|相当于`join(',')`|\n|`unshift()`|在数组头插入元素|\n|`valueOf()`| `numbers === numbers.valueOf()` // `true`|\n\n### 数组递归\n\n|方法|描述|\n|:--|:--|\n|`reduce(function(total,currentValue,currentIndex,arr),initialValue)`|按照function从左到右递归该数组，total为上一次递归函数的返回值（初始值为数组第一个元素，即第一次递归是元素1和元素2之间的操作），currentValue为当前递归的数组元素，currentIndex当前递归元素的索引，arr为该数组|\n|`reduceRight()`|与`reduce()`相同，从右往左|\n\n### 数组查找\n\n|方法|描述|\n|:--|:--|\n|`find(function(currentValue,index,arr),thisValue)`|返回第一个符合function（返回值为true）的元素，find会跳过空值的元素（定义但未赋值），返回值为该元素|\n|`findIndex()`|与find类似，返回值为元素的索引|\n|`indexOf(searchElement[, fromIndex = 0])`|查元素，返回第一次出现的索引，searchElement要查找的元素，fromIndex开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.|\n|`lastIndexOf()`|返回从右往左第一次出现的索引|\n\n### 数组遍历\n\n|方法|描述|\n|:--|:--|\n|`filter(function(currentValue,index,arr), thisValue)`|遍历数组，currentValue为当前元素，index为当前元素索引，arr为数组对象，thisValue为function内this值，缺省*取决于当前执行环境是否为严格模式（严格模式下为 undefined，非严格模式下为全局对象*（见[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach))|\n|`forEach()`|对数组中每个元素进行操作，且无法跳出循环，不改变数组的值|\n|`map()`|对数组中每个元素进行操作，且无法跳出循环，将返回值组成一个新的数组返回|\n|`some(function)`|全部不通过function返回false|\n|`every(function)`|全部通过function返回true|\n","source":"_posts/Array对象总结.md","raw":"title: Array对象总结\ndate: 2016-04-02 14:34:32\ntags:\n  - js\n  - note\ncategories:\n  - 前端\n---\n\n## 概述\n\n`Array对象`用于在单个的变量中存储多个值。\n\n## 创建\n\n* `new Array()` 返回一个空数组，length字段为0\n* `new Array(size)` 返回一个非空数组，其元素为size个undifined\n* `new Array(ele0,ele1,ele2,...,elen)`返回一个非空数组，其元素为`ele0,ele1,ele2,...,elen`\n* `Array()` 将其作为函数调用时，效果与使用new运算符将其当做构造函数来调用时的效果一样\n* `[ele0,ele1,ele2,...,elen]` 当然这样用是最常用的\n\n## 属性\n\n* `constructor` 返回对创建次对象的数组函数的引用\n* `length` **设置**或返回数组中元素的数目\n* `prototype` 向`Array对象`添加属性和方法\n\n其中，值得注意的是`length`属性，不仅可以取得当前`Array对象`中元素的数目，也可以设置当前`Array对象`可以容纳元素的数目，如果设置其length值小于当前的对象的元素数目，则会删去超出长度的元素。\n\n```\nlet arr = new Arrary(1,2,3);\nconsole.log(arr.length, arr);\narr.length = 2;\nconsole.log(arr.length, arr);\n//2 [1, 2]\narr.length = -1;\n//invalid array length\n```\n\n## 方法\n\n主要分为3类：\n\n* 数组操作\n* 数组递归\n* 数组查找\n* 数组遍历\n\n### 数组操作\n\n|方法|描述|\n|:--|:--|\n|`concat()`|在原`Array对象`的基础上连接新的`Array对象`，返回一个新的`Array对象`，和`String对象`的`concat()`实现类似功能|\n|`copyWithin(target,start,end)`|在`Array对象`内进行复制，从start位置开始，在end（缺省为数组尾）位置*前*结束，复制到target位置，溢出忽略|\n|`fill(value,start,end)`|在`Array对象`内进行批量赋值，从start位置（缺省为0）开始，在end（缺省为数组尾）位置*前*结束|\n|`Array.isArray()`|判断一个数组是否是`Array对象`|\n|`join(separator)`|将数组中元素间隔着separator连接为一个字符串|\n|`pop()`|删除数组中最后一个元素，返回该元素|\n|`push()`|在数组尾中存入若干个元素（多个参数），返回元素的长度|\n|`reverse()`|逆序数组，改变数组值，返回该数组|\n|`shift()`|删除数组中第一个元素，，返回该元素|\n|`slice(start,end)`|取数组中start到end（缺省为元素尾，不包括）之前的元素，负值表示从元素尾取值|\n|`sort(compareFunction)`|缺省按字符串的字符升序排序，compareFunction为递归函数，返回值负值者在前|\n|`splice(index,howmany,item1,.....,itemX)`|若howmany为0则在index位置开始插入，若howmany为正则从index开始删除后在index位置开始插入。因此可以在数组中任意位置插入，删除（无item）元素|\n|`toString()`|相当于`join(',')`|\n|`unshift()`|在数组头插入元素|\n|`valueOf()`| `numbers === numbers.valueOf()` // `true`|\n\n### 数组递归\n\n|方法|描述|\n|:--|:--|\n|`reduce(function(total,currentValue,currentIndex,arr),initialValue)`|按照function从左到右递归该数组，total为上一次递归函数的返回值（初始值为数组第一个元素，即第一次递归是元素1和元素2之间的操作），currentValue为当前递归的数组元素，currentIndex当前递归元素的索引，arr为该数组|\n|`reduceRight()`|与`reduce()`相同，从右往左|\n\n### 数组查找\n\n|方法|描述|\n|:--|:--|\n|`find(function(currentValue,index,arr),thisValue)`|返回第一个符合function（返回值为true）的元素，find会跳过空值的元素（定义但未赋值），返回值为该元素|\n|`findIndex()`|与find类似，返回值为元素的索引|\n|`indexOf(searchElement[, fromIndex = 0])`|查元素，返回第一次出现的索引，searchElement要查找的元素，fromIndex开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.|\n|`lastIndexOf()`|返回从右往左第一次出现的索引|\n\n### 数组遍历\n\n|方法|描述|\n|:--|:--|\n|`filter(function(currentValue,index,arr), thisValue)`|遍历数组，currentValue为当前元素，index为当前元素索引，arr为数组对象，thisValue为function内this值，缺省*取决于当前执行环境是否为严格模式（严格模式下为 undefined，非严格模式下为全局对象*（见[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach))|\n|`forEach()`|对数组中每个元素进行操作，且无法跳出循环，不改变数组的值|\n|`map()`|对数组中每个元素进行操作，且无法跳出循环，将返回值组成一个新的数组返回|\n|`some(function)`|全部不通过function返回false|\n|`every(function)`|全部通过function返回true|\n","slug":"Array对象总结","published":1,"updated":"2016-04-02T15:48:16.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83e00045gbbb0iskrn1","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Array对象</code>用于在单个的变量中存储多个值。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><ul>\n<li><code>new Array()</code> 返回一个空数组，length字段为0</li>\n<li><code>new Array(size)</code> 返回一个非空数组，其元素为size个undifined</li>\n<li><code>new Array(ele0,ele1,ele2,...,elen)</code>返回一个非空数组，其元素为<code>ele0,ele1,ele2,...,elen</code></li>\n<li><code>Array()</code> 将其作为函数调用时，效果与使用new运算符将其当做构造函数来调用时的效果一样</li>\n<li><code>[ele0,ele1,ele2,...,elen]</code> 当然这样用是最常用的</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><code>constructor</code> 返回对创建次对象的数组函数的引用</li>\n<li><code>length</code> <strong>设置</strong>或返回数组中元素的数目</li>\n<li><code>prototype</code> 向<code>Array对象</code>添加属性和方法</li>\n</ul>\n<p>其中，值得注意的是<code>length</code>属性，不仅可以取得当前<code>Array对象</code>中元素的数目，也可以设置当前<code>Array对象</code>可以容纳元素的数目，如果设置其length值小于当前的对象的元素数目，则会删去超出长度的元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = new Arrary(1,2,3);</span><br><span class=\"line\">console.log(arr.length, arr);</span><br><span class=\"line\">arr.length = 2;</span><br><span class=\"line\">console.log(arr.length, arr);</span><br><span class=\"line\">//2 [1, 2]</span><br><span class=\"line\">arr.length = -1;</span><br><span class=\"line\">//invalid array length</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>主要分为3类：</p>\n<ul>\n<li>数组操作</li>\n<li>数组递归</li>\n<li>数组查找</li>\n<li>数组遍历</li>\n</ul>\n<h3 id=\"数组操作\"><a href=\"#数组操作\" class=\"headerlink\" title=\"数组操作\"></a>数组操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>concat()</code></td>\n<td style=\"text-align:left\">在原<code>Array对象</code>的基础上连接新的<code>Array对象</code>，返回一个新的<code>Array对象</code>，和<code>String对象</code>的<code>concat()</code>实现类似功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>copyWithin(target,start,end)</code></td>\n<td style=\"text-align:left\">在<code>Array对象</code>内进行复制，从start位置开始，在end（缺省为数组尾）位置<em>前</em>结束，复制到target位置，溢出忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fill(value,start,end)</code></td>\n<td style=\"text-align:left\">在<code>Array对象</code>内进行批量赋值，从start位置（缺省为0）开始，在end（缺省为数组尾）位置<em>前</em>结束</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Array.isArray()</code></td>\n<td style=\"text-align:left\">判断一个数组是否是<code>Array对象</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>join(separator)</code></td>\n<td style=\"text-align:left\">将数组中元素间隔着separator连接为一个字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop()</code></td>\n<td style=\"text-align:left\">删除数组中最后一个元素，返回该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push()</code></td>\n<td style=\"text-align:left\">在数组尾中存入若干个元素（多个参数），返回元素的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>reverse()</code></td>\n<td style=\"text-align:left\">逆序数组，改变数组值，返回该数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>shift()</code></td>\n<td style=\"text-align:left\">删除数组中第一个元素，，返回该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>slice(start,end)</code></td>\n<td style=\"text-align:left\">取数组中start到end（缺省为元素尾，不包括）之前的元素，负值表示从元素尾取值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sort(compareFunction)</code></td>\n<td style=\"text-align:left\">缺省按字符串的字符升序排序，compareFunction为递归函数，返回值负值者在前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>splice(index,howmany,item1,.....,itemX)</code></td>\n<td style=\"text-align:left\">若howmany为0则在index位置开始插入，若howmany为正则从index开始删除后在index位置开始插入。因此可以在数组中任意位置插入，删除（无item）元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toString()</code></td>\n<td style=\"text-align:left\">相当于<code>join(&#39;,&#39;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>unshift()</code></td>\n<td style=\"text-align:left\">在数组头插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>valueOf()</code></td>\n<td style=\"text-align:left\"><code>numbers === numbers.valueOf()</code> // <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组递归\"><a href=\"#数组递归\" class=\"headerlink\" title=\"数组递归\"></a>数组递归</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>reduce(function(total,currentValue,currentIndex,arr),initialValue)</code></td>\n<td style=\"text-align:left\">按照function从左到右递归该数组，total为上一次递归函数的返回值（初始值为数组第一个元素，即第一次递归是元素1和元素2之间的操作），currentValue为当前递归的数组元素，currentIndex当前递归元素的索引，arr为该数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>reduceRight()</code></td>\n<td style=\"text-align:left\">与<code>reduce()</code>相同，从右往左</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组查找\"><a href=\"#数组查找\" class=\"headerlink\" title=\"数组查找\"></a>数组查找</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>find(function(currentValue,index,arr),thisValue)</code></td>\n<td style=\"text-align:left\">返回第一个符合function（返回值为true）的元素，find会跳过空值的元素（定义但未赋值），返回值为该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>findIndex()</code></td>\n<td style=\"text-align:left\">与find类似，返回值为元素的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>indexOf(searchElement[, fromIndex = 0])</code></td>\n<td style=\"text-align:left\">查元素，返回第一次出现的索引，searchElement要查找的元素，fromIndex开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:left\">返回从右往左第一次出现的索引</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>filter(function(currentValue,index,arr), thisValue)</code></td>\n<td style=\"text-align:left\">遍历数组，currentValue为当前元素，index为当前元素索引，arr为数组对象，thisValue为function内this值，缺省<em>取决于当前执行环境是否为严格模式（严格模式下为 undefined，非严格模式下为全局对象</em>（见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"external\">MDN</a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>forEach()</code></td>\n<td style=\"text-align:left\">对数组中每个元素进行操作，且无法跳出循环，不改变数组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>map()</code></td>\n<td style=\"text-align:left\">对数组中每个元素进行操作，且无法跳出循环，将返回值组成一个新的数组返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>some(function)</code></td>\n<td style=\"text-align:left\">全部不通过function返回false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>every(function)</code></td>\n<td style=\"text-align:left\">全部通过function返回true</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Array对象</code>用于在单个的变量中存储多个值。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><ul>\n<li><code>new Array()</code> 返回一个空数组，length字段为0</li>\n<li><code>new Array(size)</code> 返回一个非空数组，其元素为size个undifined</li>\n<li><code>new Array(ele0,ele1,ele2,...,elen)</code>返回一个非空数组，其元素为<code>ele0,ele1,ele2,...,elen</code></li>\n<li><code>Array()</code> 将其作为函数调用时，效果与使用new运算符将其当做构造函数来调用时的效果一样</li>\n<li><code>[ele0,ele1,ele2,...,elen]</code> 当然这样用是最常用的</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><code>constructor</code> 返回对创建次对象的数组函数的引用</li>\n<li><code>length</code> <strong>设置</strong>或返回数组中元素的数目</li>\n<li><code>prototype</code> 向<code>Array对象</code>添加属性和方法</li>\n</ul>\n<p>其中，值得注意的是<code>length</code>属性，不仅可以取得当前<code>Array对象</code>中元素的数目，也可以设置当前<code>Array对象</code>可以容纳元素的数目，如果设置其length值小于当前的对象的元素数目，则会删去超出长度的元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = new Arrary(1,2,3);</span><br><span class=\"line\">console.log(arr.length, arr);</span><br><span class=\"line\">arr.length = 2;</span><br><span class=\"line\">console.log(arr.length, arr);</span><br><span class=\"line\">//2 [1, 2]</span><br><span class=\"line\">arr.length = -1;</span><br><span class=\"line\">//invalid array length</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>主要分为3类：</p>\n<ul>\n<li>数组操作</li>\n<li>数组递归</li>\n<li>数组查找</li>\n<li>数组遍历</li>\n</ul>\n<h3 id=\"数组操作\"><a href=\"#数组操作\" class=\"headerlink\" title=\"数组操作\"></a>数组操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>concat()</code></td>\n<td style=\"text-align:left\">在原<code>Array对象</code>的基础上连接新的<code>Array对象</code>，返回一个新的<code>Array对象</code>，和<code>String对象</code>的<code>concat()</code>实现类似功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>copyWithin(target,start,end)</code></td>\n<td style=\"text-align:left\">在<code>Array对象</code>内进行复制，从start位置开始，在end（缺省为数组尾）位置<em>前</em>结束，复制到target位置，溢出忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fill(value,start,end)</code></td>\n<td style=\"text-align:left\">在<code>Array对象</code>内进行批量赋值，从start位置（缺省为0）开始，在end（缺省为数组尾）位置<em>前</em>结束</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Array.isArray()</code></td>\n<td style=\"text-align:left\">判断一个数组是否是<code>Array对象</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>join(separator)</code></td>\n<td style=\"text-align:left\">将数组中元素间隔着separator连接为一个字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop()</code></td>\n<td style=\"text-align:left\">删除数组中最后一个元素，返回该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>push()</code></td>\n<td style=\"text-align:left\">在数组尾中存入若干个元素（多个参数），返回元素的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>reverse()</code></td>\n<td style=\"text-align:left\">逆序数组，改变数组值，返回该数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>shift()</code></td>\n<td style=\"text-align:left\">删除数组中第一个元素，，返回该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>slice(start,end)</code></td>\n<td style=\"text-align:left\">取数组中start到end（缺省为元素尾，不包括）之前的元素，负值表示从元素尾取值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>sort(compareFunction)</code></td>\n<td style=\"text-align:left\">缺省按字符串的字符升序排序，compareFunction为递归函数，返回值负值者在前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>splice(index,howmany,item1,.....,itemX)</code></td>\n<td style=\"text-align:left\">若howmany为0则在index位置开始插入，若howmany为正则从index开始删除后在index位置开始插入。因此可以在数组中任意位置插入，删除（无item）元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toString()</code></td>\n<td style=\"text-align:left\">相当于<code>join(&#39;,&#39;)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>unshift()</code></td>\n<td style=\"text-align:left\">在数组头插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>valueOf()</code></td>\n<td style=\"text-align:left\"><code>numbers === numbers.valueOf()</code> // <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组递归\"><a href=\"#数组递归\" class=\"headerlink\" title=\"数组递归\"></a>数组递归</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>reduce(function(total,currentValue,currentIndex,arr),initialValue)</code></td>\n<td style=\"text-align:left\">按照function从左到右递归该数组，total为上一次递归函数的返回值（初始值为数组第一个元素，即第一次递归是元素1和元素2之间的操作），currentValue为当前递归的数组元素，currentIndex当前递归元素的索引，arr为该数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>reduceRight()</code></td>\n<td style=\"text-align:left\">与<code>reduce()</code>相同，从右往左</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组查找\"><a href=\"#数组查找\" class=\"headerlink\" title=\"数组查找\"></a>数组查找</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>find(function(currentValue,index,arr),thisValue)</code></td>\n<td style=\"text-align:left\">返回第一个符合function（返回值为true）的元素，find会跳过空值的元素（定义但未赋值），返回值为该元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>findIndex()</code></td>\n<td style=\"text-align:left\">与find类似，返回值为元素的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>indexOf(searchElement[, fromIndex = 0])</code></td>\n<td style=\"text-align:left\">查元素，返回第一次出现的索引，searchElement要查找的元素，fromIndex开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:left\">返回从右往左第一次出现的索引</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>filter(function(currentValue,index,arr), thisValue)</code></td>\n<td style=\"text-align:left\">遍历数组，currentValue为当前元素，index为当前元素索引，arr为数组对象，thisValue为function内this值，缺省<em>取决于当前执行环境是否为严格模式（严格模式下为 undefined，非严格模式下为全局对象</em>（见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">MDN</a>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>forEach()</code></td>\n<td style=\"text-align:left\">对数组中每个元素进行操作，且无法跳出循环，不改变数组的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>map()</code></td>\n<td style=\"text-align:left\">对数组中每个元素进行操作，且无法跳出循环，将返回值组成一个新的数组返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>some(function)</code></td>\n<td style=\"text-align:left\">全部不通过function返回false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>every(function)</code></td>\n<td style=\"text-align:left\">全部通过function返回true</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"String对象总结","date":"2016-04-01T13:02:34.000Z","_content":"\n## 前言\n\n重头学js吧，按照winter的说法学呗，全部打印出来，一个一个去学，去研究。希望这一次的js学习笔记能够坚持下去，有空就写一篇。\n\n## 概述\n\n在JavaScript中String对象用于处理字符串文本。\n\n## 创建\n\n```\nnew String(s);\nString(s);\n```\n\n其中，参数`s`可以是原始字符串值，也可以是一个`String对象`。\n\n* 当`String()`和`new`一起作为构造函数使用时，它返回一个新创建的`String对象`。\n* 当单独调用`String()`时，它将`s`转化成原始的字符串，并返回转换后的值。\n\n## 属性\n\n* constructor: 对创建该对象的函数的引用\n* length: 字符串的长度\n* prototype: 原型，可以像`String对象`添加属性和方法\n\n## 方法\n\n主要分为3类：\n\n* HTML标签类\n* 字符串操作\n* 字符串查找\n\n### HTML标签类\n\n个人感觉没啥用，毕竟现在都要用css来做样式了。\n\n|方法|描述|\n|:--:|:--:|\n|`anchor()`|创建锚点|\n|`big()`|大号字体|\n|`blink()`|闪烁|\n|`bold()`|粗体|\n|`fixed()`|打字机体|\n|`fontcolor()`|设置字体颜色|\n|`fontsize()`|设置字体大小|\n|`italics()`|斜体|\n|`link()`|超链接|\n|`small()`|小号字体|\n|`strike()`|删除线|\n|`sup()`|上标|\n|`sub()`|下标|\n\n### 字符串操作\n\n主要实现字符串的大小写转化、拆分、连接等方法。\n\n|方法|描述|\n|:--|:--|\n|`concat()`|连接字符串|\n|`split()`|将字符串拆分为数组|\n|`toLocaleLowerCase()`|转化为本地化小写|\n|`toLocaleUpperCase()`|转化为本地化大写|\n|`toLowerCase()`|转化为小写|\n|`toUpperCase()`|转化为大写|\n|`fromCharCode()`|将一个或多个Unicode值转换为字符串|\n|`toString()`|转化为原始字符串|\n|`valueOf()`|返回字符串对象的原始值|\n|`slice()`|提取字符串的片断，并在*新的字符串*中返回被提取的部分。|\n|`substr()`|从起始索引号提取字符串中指定数目的字符，并在*新的字符串*中返回被提取的部分。|\n|`substring()`|提取字符串中两个指定的索引号之间的字符，并在*新的字符串*中返回被提取的部分。|\n\n值得注意的是`slice()`、`substr()`、`substring()`都是用来实现字符串的拆分，他们的区别主要在方法的对第二参数、负参数和第二参数小于第一参数的理解上。\n\n* `slice()`和`substring()`的第二个参数表示结束位置，`substr()`表示子串长度。\n* 第一参数为负时，`slice()`和`substr()`表示从字符串尾开始计算位置，`substring()`视为0；第二参数为负时，`slice()`表示从字符串尾开始计算位置，`substr()`认为截取长度为0，返回空字符串，`substring()`视为0。\n* 第一参数大于第二参数时，`slice()`结算为正值后，若开始位置在结束位置后返回空串，其他正常，`substring()`交换参数进行拆分。\n\n总的来说，`slice()`和`substr()`思想类似，功能区别在第二参数，`substring()`对负值的理解比较差。\n\n### 字符串查找\n\n实现了接受一个正则表达式或一个位置，对字符串进行查找的方法。\n\n|方法|描述|\n|:--|:--|\n|`charat()`|连接字符串|\n|`charCodeAt()`|返回在指定的位置的字符的 Unicode 编码|\n|`indexOf()`|检索字符串|\n|`lastIndexOf()`|从后向前搜索字符串|\n|`search()`|检索与正则表达式相匹配的值|\n|`match()`|找到一个或多个正则表达式的匹配|\n|`replace()`|替换与正则表达式匹配的子串|\n\n值得注意的是`match()`返回的是匹配的值的数组，`search()`返回的是匹配的值的位置。\n","source":"_posts/String对象总结.md","raw":"title: String对象总结\ndate: 2016-04-01 21:02:34\ntags:\n  - js\n  - note\ncategories:\n  - 前端\n---\n\n## 前言\n\n重头学js吧，按照winter的说法学呗，全部打印出来，一个一个去学，去研究。希望这一次的js学习笔记能够坚持下去，有空就写一篇。\n\n## 概述\n\n在JavaScript中String对象用于处理字符串文本。\n\n## 创建\n\n```\nnew String(s);\nString(s);\n```\n\n其中，参数`s`可以是原始字符串值，也可以是一个`String对象`。\n\n* 当`String()`和`new`一起作为构造函数使用时，它返回一个新创建的`String对象`。\n* 当单独调用`String()`时，它将`s`转化成原始的字符串，并返回转换后的值。\n\n## 属性\n\n* constructor: 对创建该对象的函数的引用\n* length: 字符串的长度\n* prototype: 原型，可以像`String对象`添加属性和方法\n\n## 方法\n\n主要分为3类：\n\n* HTML标签类\n* 字符串操作\n* 字符串查找\n\n### HTML标签类\n\n个人感觉没啥用，毕竟现在都要用css来做样式了。\n\n|方法|描述|\n|:--:|:--:|\n|`anchor()`|创建锚点|\n|`big()`|大号字体|\n|`blink()`|闪烁|\n|`bold()`|粗体|\n|`fixed()`|打字机体|\n|`fontcolor()`|设置字体颜色|\n|`fontsize()`|设置字体大小|\n|`italics()`|斜体|\n|`link()`|超链接|\n|`small()`|小号字体|\n|`strike()`|删除线|\n|`sup()`|上标|\n|`sub()`|下标|\n\n### 字符串操作\n\n主要实现字符串的大小写转化、拆分、连接等方法。\n\n|方法|描述|\n|:--|:--|\n|`concat()`|连接字符串|\n|`split()`|将字符串拆分为数组|\n|`toLocaleLowerCase()`|转化为本地化小写|\n|`toLocaleUpperCase()`|转化为本地化大写|\n|`toLowerCase()`|转化为小写|\n|`toUpperCase()`|转化为大写|\n|`fromCharCode()`|将一个或多个Unicode值转换为字符串|\n|`toString()`|转化为原始字符串|\n|`valueOf()`|返回字符串对象的原始值|\n|`slice()`|提取字符串的片断，并在*新的字符串*中返回被提取的部分。|\n|`substr()`|从起始索引号提取字符串中指定数目的字符，并在*新的字符串*中返回被提取的部分。|\n|`substring()`|提取字符串中两个指定的索引号之间的字符，并在*新的字符串*中返回被提取的部分。|\n\n值得注意的是`slice()`、`substr()`、`substring()`都是用来实现字符串的拆分，他们的区别主要在方法的对第二参数、负参数和第二参数小于第一参数的理解上。\n\n* `slice()`和`substring()`的第二个参数表示结束位置，`substr()`表示子串长度。\n* 第一参数为负时，`slice()`和`substr()`表示从字符串尾开始计算位置，`substring()`视为0；第二参数为负时，`slice()`表示从字符串尾开始计算位置，`substr()`认为截取长度为0，返回空字符串，`substring()`视为0。\n* 第一参数大于第二参数时，`slice()`结算为正值后，若开始位置在结束位置后返回空串，其他正常，`substring()`交换参数进行拆分。\n\n总的来说，`slice()`和`substr()`思想类似，功能区别在第二参数，`substring()`对负值的理解比较差。\n\n### 字符串查找\n\n实现了接受一个正则表达式或一个位置，对字符串进行查找的方法。\n\n|方法|描述|\n|:--|:--|\n|`charat()`|连接字符串|\n|`charCodeAt()`|返回在指定的位置的字符的 Unicode 编码|\n|`indexOf()`|检索字符串|\n|`lastIndexOf()`|从后向前搜索字符串|\n|`search()`|检索与正则表达式相匹配的值|\n|`match()`|找到一个或多个正则表达式的匹配|\n|`replace()`|替换与正则表达式匹配的子串|\n\n值得注意的是`match()`返回的是匹配的值的数组，`search()`返回的是匹配的值的位置。\n","slug":"String对象总结","published":1,"updated":"2016-04-02T15:40:01.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83h00065gbbr3wxppat","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>重头学js吧，按照winter的说法学呗，全部打印出来，一个一个去学，去研究。希望这一次的js学习笔记能够坚持下去，有空就写一篇。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在JavaScript中String对象用于处理字符串文本。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new String(s);</span><br><span class=\"line\">String(s);</span><br></pre></td></tr></table></figure>\n<p>其中，参数<code>s</code>可以是原始字符串值，也可以是一个<code>String对象</code>。</p>\n<ul>\n<li>当<code>String()</code>和<code>new</code>一起作为构造函数使用时，它返回一个新创建的<code>String对象</code>。</li>\n<li>当单独调用<code>String()</code>时，它将<code>s</code>转化成原始的字符串，并返回转换后的值。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li>constructor: 对创建该对象的函数的引用</li>\n<li>length: 字符串的长度</li>\n<li>prototype: 原型，可以像<code>String对象</code>添加属性和方法</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>主要分为3类：</p>\n<ul>\n<li>HTML标签类</li>\n<li>字符串操作</li>\n<li>字符串查找</li>\n</ul>\n<h3 id=\"HTML标签类\"><a href=\"#HTML标签类\" class=\"headerlink\" title=\"HTML标签类\"></a>HTML标签类</h3><p>个人感觉没啥用，毕竟现在都要用css来做样式了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>anchor()</code></td>\n<td style=\"text-align:center\">创建锚点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>big()</code></td>\n<td style=\"text-align:center\">大号字体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>blink()</code></td>\n<td style=\"text-align:center\">闪烁</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>bold()</code></td>\n<td style=\"text-align:center\">粗体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fixed()</code></td>\n<td style=\"text-align:center\">打字机体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fontcolor()</code></td>\n<td style=\"text-align:center\">设置字体颜色</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fontsize()</code></td>\n<td style=\"text-align:center\">设置字体大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>italics()</code></td>\n<td style=\"text-align:center\">斜体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>link()</code></td>\n<td style=\"text-align:center\">超链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>small()</code></td>\n<td style=\"text-align:center\">小号字体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>strike()</code></td>\n<td style=\"text-align:center\">删除线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sup()</code></td>\n<td style=\"text-align:center\">上标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sub()</code></td>\n<td style=\"text-align:center\">下标</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h3><p>主要实现字符串的大小写转化、拆分、连接等方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>concat()</code></td>\n<td style=\"text-align:left\">连接字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>split()</code></td>\n<td style=\"text-align:left\">将字符串拆分为数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLocaleLowerCase()</code></td>\n<td style=\"text-align:left\">转化为本地化小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLocaleUpperCase()</code></td>\n<td style=\"text-align:left\">转化为本地化大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLowerCase()</code></td>\n<td style=\"text-align:left\">转化为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toUpperCase()</code></td>\n<td style=\"text-align:left\">转化为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fromCharCode()</code></td>\n<td style=\"text-align:left\">将一个或多个Unicode值转换为字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toString()</code></td>\n<td style=\"text-align:left\">转化为原始字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>valueOf()</code></td>\n<td style=\"text-align:left\">返回字符串对象的原始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>slice()</code></td>\n<td style=\"text-align:left\">提取字符串的片断，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>substr()</code></td>\n<td style=\"text-align:left\">从起始索引号提取字符串中指定数目的字符，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>substring()</code></td>\n<td style=\"text-align:left\">提取字符串中两个指定的索引号之间的字符，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是<code>slice()</code>、<code>substr()</code>、<code>substring()</code>都是用来实现字符串的拆分，他们的区别主要在方法的对第二参数、负参数和第二参数小于第一参数的理解上。</p>\n<ul>\n<li><code>slice()</code>和<code>substring()</code>的第二个参数表示结束位置，<code>substr()</code>表示子串长度。</li>\n<li>第一参数为负时，<code>slice()</code>和<code>substr()</code>表示从字符串尾开始计算位置，<code>substring()</code>视为0；第二参数为负时，<code>slice()</code>表示从字符串尾开始计算位置，<code>substr()</code>认为截取长度为0，返回空字符串，<code>substring()</code>视为0。</li>\n<li>第一参数大于第二参数时，<code>slice()</code>结算为正值后，若开始位置在结束位置后返回空串，其他正常，<code>substring()</code>交换参数进行拆分。</li>\n</ul>\n<p>总的来说，<code>slice()</code>和<code>substr()</code>思想类似，功能区别在第二参数，<code>substring()</code>对负值的理解比较差。</p>\n<h3 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h3><p>实现了接受一个正则表达式或一个位置，对字符串进行查找的方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>charat()</code></td>\n<td style=\"text-align:left\">连接字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>charCodeAt()</code></td>\n<td style=\"text-align:left\">返回在指定的位置的字符的 Unicode 编码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>indexOf()</code></td>\n<td style=\"text-align:left\">检索字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:left\">从后向前搜索字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>search()</code></td>\n<td style=\"text-align:left\">检索与正则表达式相匹配的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>match()</code></td>\n<td style=\"text-align:left\">找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>replace()</code></td>\n<td style=\"text-align:left\">替换与正则表达式匹配的子串</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是<code>match()</code>返回的是匹配的值的数组，<code>search()</code>返回的是匹配的值的位置。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>重头学js吧，按照winter的说法学呗，全部打印出来，一个一个去学，去研究。希望这一次的js学习笔记能够坚持下去，有空就写一篇。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在JavaScript中String对象用于处理字符串文本。</p>\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new String(s);</span><br><span class=\"line\">String(s);</span><br></pre></td></tr></table></figure>\n<p>其中，参数<code>s</code>可以是原始字符串值，也可以是一个<code>String对象</code>。</p>\n<ul>\n<li>当<code>String()</code>和<code>new</code>一起作为构造函数使用时，它返回一个新创建的<code>String对象</code>。</li>\n<li>当单独调用<code>String()</code>时，它将<code>s</code>转化成原始的字符串，并返回转换后的值。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li>constructor: 对创建该对象的函数的引用</li>\n<li>length: 字符串的长度</li>\n<li>prototype: 原型，可以像<code>String对象</code>添加属性和方法</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>主要分为3类：</p>\n<ul>\n<li>HTML标签类</li>\n<li>字符串操作</li>\n<li>字符串查找</li>\n</ul>\n<h3 id=\"HTML标签类\"><a href=\"#HTML标签类\" class=\"headerlink\" title=\"HTML标签类\"></a>HTML标签类</h3><p>个人感觉没啥用，毕竟现在都要用css来做样式了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>anchor()</code></td>\n<td style=\"text-align:center\">创建锚点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>big()</code></td>\n<td style=\"text-align:center\">大号字体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>blink()</code></td>\n<td style=\"text-align:center\">闪烁</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>bold()</code></td>\n<td style=\"text-align:center\">粗体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fixed()</code></td>\n<td style=\"text-align:center\">打字机体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fontcolor()</code></td>\n<td style=\"text-align:center\">设置字体颜色</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>fontsize()</code></td>\n<td style=\"text-align:center\">设置字体大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>italics()</code></td>\n<td style=\"text-align:center\">斜体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>link()</code></td>\n<td style=\"text-align:center\">超链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>small()</code></td>\n<td style=\"text-align:center\">小号字体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>strike()</code></td>\n<td style=\"text-align:center\">删除线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sup()</code></td>\n<td style=\"text-align:center\">上标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sub()</code></td>\n<td style=\"text-align:center\">下标</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h3><p>主要实现字符串的大小写转化、拆分、连接等方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>concat()</code></td>\n<td style=\"text-align:left\">连接字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>split()</code></td>\n<td style=\"text-align:left\">将字符串拆分为数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLocaleLowerCase()</code></td>\n<td style=\"text-align:left\">转化为本地化小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLocaleUpperCase()</code></td>\n<td style=\"text-align:left\">转化为本地化大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toLowerCase()</code></td>\n<td style=\"text-align:left\">转化为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toUpperCase()</code></td>\n<td style=\"text-align:left\">转化为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fromCharCode()</code></td>\n<td style=\"text-align:left\">将一个或多个Unicode值转换为字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>toString()</code></td>\n<td style=\"text-align:left\">转化为原始字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>valueOf()</code></td>\n<td style=\"text-align:left\">返回字符串对象的原始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>slice()</code></td>\n<td style=\"text-align:left\">提取字符串的片断，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>substr()</code></td>\n<td style=\"text-align:left\">从起始索引号提取字符串中指定数目的字符，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>substring()</code></td>\n<td style=\"text-align:left\">提取字符串中两个指定的索引号之间的字符，并在<em>新的字符串</em>中返回被提取的部分。</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是<code>slice()</code>、<code>substr()</code>、<code>substring()</code>都是用来实现字符串的拆分，他们的区别主要在方法的对第二参数、负参数和第二参数小于第一参数的理解上。</p>\n<ul>\n<li><code>slice()</code>和<code>substring()</code>的第二个参数表示结束位置，<code>substr()</code>表示子串长度。</li>\n<li>第一参数为负时，<code>slice()</code>和<code>substr()</code>表示从字符串尾开始计算位置，<code>substring()</code>视为0；第二参数为负时，<code>slice()</code>表示从字符串尾开始计算位置，<code>substr()</code>认为截取长度为0，返回空字符串，<code>substring()</code>视为0。</li>\n<li>第一参数大于第二参数时，<code>slice()</code>结算为正值后，若开始位置在结束位置后返回空串，其他正常，<code>substring()</code>交换参数进行拆分。</li>\n</ul>\n<p>总的来说，<code>slice()</code>和<code>substr()</code>思想类似，功能区别在第二参数，<code>substring()</code>对负值的理解比较差。</p>\n<h3 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h3><p>实现了接受一个正则表达式或一个位置，对字符串进行查找的方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>charat()</code></td>\n<td style=\"text-align:left\">连接字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>charCodeAt()</code></td>\n<td style=\"text-align:left\">返回在指定的位置的字符的 Unicode 编码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>indexOf()</code></td>\n<td style=\"text-align:left\">检索字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:left\">从后向前搜索字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>search()</code></td>\n<td style=\"text-align:left\">检索与正则表达式相匹配的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>match()</code></td>\n<td style=\"text-align:left\">找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>replace()</code></td>\n<td style=\"text-align:left\">替换与正则表达式匹配的子串</td>\n</tr>\n</tbody>\n</table>\n<p>值得注意的是<code>match()</code>返回的是匹配的值的数组，<code>search()</code>返回的是匹配的值的位置。</p>\n"},{"title":"distribution-network-reconfiguraton-with-HSA","date":"2015-04-25T14:22:36.000Z","_content":"##HSA\n目前和声算法已经做得比较成熟，小系统和中系统都可以算\n\n##powerflow\n潮流主要用了牛拉法，对于牛拉的核心掌握还不是很好，但是牛拉算潮流基本上封装的比较好，在33-bus和69-bus上都验证了有效性。\n但是在119-bus上结果不对，而且119-bus系统编号有问题，找了一个没问题的算例，结果更奇葩，不能理解。\n\n##sample system\n支持33-bus，69-bus；不支持119-bus。前者都是11.26kV，后者是11kV。\n\n##TODO\n1. 台风模型：\n    + 台风的影响半径：一般十级100km，也有300km\n    + 台风对配网的影响：故障率建模\n    + 台风影响范围：确定受影响最严重的台风\n2. 论文：\n    + 月底或5月初投电网\n    + 5月中完成台风模型","source":"_posts/distribution-network-reconfiguraton-with-HSA.md","raw":"title: \"distribution-network-reconfiguraton-with-HSA\"\ndate: 2015-04-25 22:22:36\ntags: [电力,配电网,算法]\n---\n##HSA\n目前和声算法已经做得比较成熟，小系统和中系统都可以算\n\n##powerflow\n潮流主要用了牛拉法，对于牛拉的核心掌握还不是很好，但是牛拉算潮流基本上封装的比较好，在33-bus和69-bus上都验证了有效性。\n但是在119-bus上结果不对，而且119-bus系统编号有问题，找了一个没问题的算例，结果更奇葩，不能理解。\n\n##sample system\n支持33-bus，69-bus；不支持119-bus。前者都是11.26kV，后者是11kV。\n\n##TODO\n1. 台风模型：\n    + 台风的影响半径：一般十级100km，也有300km\n    + 台风对配网的影响：故障率建模\n    + 台风影响范围：确定受影响最严重的台风\n2. 论文：\n    + 月底或5月初投电网\n    + 5月中完成台风模型","slug":"distribution-network-reconfiguraton-with-HSA","published":1,"updated":"2015-04-25T14:34:23.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83k00085gbb40pg0xpv","content":"<p>##HSA<br>目前和声算法已经做得比较成熟，小系统和中系统都可以算</p>\n<p>##powerflow<br>潮流主要用了牛拉法，对于牛拉的核心掌握还不是很好，但是牛拉算潮流基本上封装的比较好，在33-bus和69-bus上都验证了有效性。<br>但是在119-bus上结果不对，而且119-bus系统编号有问题，找了一个没问题的算例，结果更奇葩，不能理解。</p>\n<p>##sample system<br>支持33-bus，69-bus；不支持119-bus。前者都是11.26kV，后者是11kV。</p>\n<p>##TODO</p>\n<ol>\n<li>台风模型：<ul>\n<li>台风的影响半径：一般十级100km，也有300km</li>\n<li>台风对配网的影响：故障率建模</li>\n<li>台风影响范围：确定受影响最严重的台风</li>\n</ul>\n</li>\n<li>论文：<ul>\n<li>月底或5月初投电网</li>\n<li>5月中完成台风模型</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>##HSA<br>目前和声算法已经做得比较成熟，小系统和中系统都可以算</p>\n<p>##powerflow<br>潮流主要用了牛拉法，对于牛拉的核心掌握还不是很好，但是牛拉算潮流基本上封装的比较好，在33-bus和69-bus上都验证了有效性。<br>但是在119-bus上结果不对，而且119-bus系统编号有问题，找了一个没问题的算例，结果更奇葩，不能理解。</p>\n<p>##sample system<br>支持33-bus，69-bus；不支持119-bus。前者都是11.26kV，后者是11kV。</p>\n<p>##TODO</p>\n<ol>\n<li>台风模型：<ul>\n<li>台风的影响半径：一般十级100km，也有300km</li>\n<li>台风对配网的影响：故障率建模</li>\n<li>台风影响范围：确定受影响最严重的台风</li>\n</ul>\n</li>\n<li>论文：<ul>\n<li>月底或5月初投电网</li>\n<li>5月中完成台风模型</li>\n</ul>\n</li>\n</ol>\n"},{"title":"ECMAScript基础","date":"2015-04-23T07:50:21.000Z","_content":"#ECMAScript基础\n##原始类型\n1. 原始类型有Undefined、Null、Bollean、Number和String。\n2. typeof用来判断一个值是否在某种类型的范围内，引用类型或者Null返回object，null被认为是对象的占位符。\n3. undefined： \n    - 声明的对象未初始化\n    - 对象未定义：**只能对未定义的对象使用typeof，使用其他运算符会报错**\n    - 函数无明确返回值\n4. null用于表示尚未存在的对象。\n5.  `typeof(1)`和`typeof(NaN)`都是`number`，但`isNaN(NaN)`与`isNaN(1)`是不一样的。\n6. Number的`toString()`可以根据不同的基输出结果。\n7.  String的`pasreInt()` 可以把字符串中的第一串数字字符转化成数字（0xA会被转化成10），会在第一个无效字符之前停止，同样也有基模式。\n\n##引用类型\n1. String可以有`indexof()`、`charAt()`、`valueOf()`、`toString()`等方法。\n2. String的`slice()`可以传负参数，其表示字符串长度加上负参数值，slice开始位置包含在返回值，终止位置不包含在返回值，从0开始计位置。\n\n##函数\n1. js的函数不支持重载，但是可以使用特殊对象arguments，无需指出参数名，就能访问它们。ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，其中，遗漏的函数以undefined传递给函数，多余的参数被忽略，因此可以通过arguments来简易模拟函数重载。\n`function a() {}`等价于`var a = function(){}`。\n2. 函数实际上是功能完整的对象。Function类可以表示开发者定义的任何函数。**函数名实际上是函数对象的引用值**，**函数可以作为参数传递给另外一个函数**。\n3. **闭包**\n\n **闭包**是指函数能使用函数外定义的变量。\n\n\n    <!--lang:javascript--> \n    var iBaseNum = 10;\n    function addNumbers(iNum1, iNum2) {\n        //闭包\n        function doAddition (){\n            return iNum1 + iNum2 + iBaseNum;\n        }\n    return doAddition();\n    } \n\n 闭包可以用来读取局部变量。\n\n    function f1(){\n        var n=999;\n        function f2(){\n           alert(n); // 999\n        }\n    }\n\n    function f1(){\n        var n=999;\n        function f2(){\n            alert(n); \n        }\n        return f2;//返回函数的引用\n    }\n    var result=f1();// result =  f2\n    result(); // 999\n\n [闭包](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html \"学习Javascript闭包\")主要用来**读取函数内部的变量**或者**让这些变量的值始终保持在内存中**。个人认为，闭包的关键在于返回了一个子函数，子函数可以调用父函数的变量，从而可以再外部调用到父函数内部的变量。这里的子函数如果是定义为全局变量，则直接通过调用子函数来实现访问内部变量。\n","source":"_posts/js-notes.md","raw":"title: \"ECMAScript基础\"\ndate: 2015-04-23 15:50:21\ntags: [js,note]\n---\n#ECMAScript基础\n##原始类型\n1. 原始类型有Undefined、Null、Bollean、Number和String。\n2. typeof用来判断一个值是否在某种类型的范围内，引用类型或者Null返回object，null被认为是对象的占位符。\n3. undefined： \n    - 声明的对象未初始化\n    - 对象未定义：**只能对未定义的对象使用typeof，使用其他运算符会报错**\n    - 函数无明确返回值\n4. null用于表示尚未存在的对象。\n5.  `typeof(1)`和`typeof(NaN)`都是`number`，但`isNaN(NaN)`与`isNaN(1)`是不一样的。\n6. Number的`toString()`可以根据不同的基输出结果。\n7.  String的`pasreInt()` 可以把字符串中的第一串数字字符转化成数字（0xA会被转化成10），会在第一个无效字符之前停止，同样也有基模式。\n\n##引用类型\n1. String可以有`indexof()`、`charAt()`、`valueOf()`、`toString()`等方法。\n2. String的`slice()`可以传负参数，其表示字符串长度加上负参数值，slice开始位置包含在返回值，终止位置不包含在返回值，从0开始计位置。\n\n##函数\n1. js的函数不支持重载，但是可以使用特殊对象arguments，无需指出参数名，就能访问它们。ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，其中，遗漏的函数以undefined传递给函数，多余的参数被忽略，因此可以通过arguments来简易模拟函数重载。\n`function a() {}`等价于`var a = function(){}`。\n2. 函数实际上是功能完整的对象。Function类可以表示开发者定义的任何函数。**函数名实际上是函数对象的引用值**，**函数可以作为参数传递给另外一个函数**。\n3. **闭包**\n\n **闭包**是指函数能使用函数外定义的变量。\n\n\n    <!--lang:javascript--> \n    var iBaseNum = 10;\n    function addNumbers(iNum1, iNum2) {\n        //闭包\n        function doAddition (){\n            return iNum1 + iNum2 + iBaseNum;\n        }\n    return doAddition();\n    } \n\n 闭包可以用来读取局部变量。\n\n    function f1(){\n        var n=999;\n        function f2(){\n           alert(n); // 999\n        }\n    }\n\n    function f1(){\n        var n=999;\n        function f2(){\n            alert(n); \n        }\n        return f2;//返回函数的引用\n    }\n    var result=f1();// result =  f2\n    result(); // 999\n\n [闭包](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html \"学习Javascript闭包\")主要用来**读取函数内部的变量**或者**让这些变量的值始终保持在内存中**。个人认为，闭包的关键在于返回了一个子函数，子函数可以调用父函数的变量，从而可以再外部调用到父函数内部的变量。这里的子函数如果是定义为全局变量，则直接通过调用子函数来实现访问内部变量。\n","slug":"js-notes","published":1,"updated":"2015-04-23T13:26:30.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83p000a5gbbw4oxt9p3","content":"<p>#ECMAScript基础</p>\n<p>##原始类型</p>\n<ol>\n<li>原始类型有Undefined、Null、Bollean、Number和String。</li>\n<li>typeof用来判断一个值是否在某种类型的范围内，引用类型或者Null返回object，null被认为是对象的占位符。</li>\n<li>undefined： <ul>\n<li>声明的对象未初始化</li>\n<li>对象未定义：<strong>只能对未定义的对象使用typeof，使用其他运算符会报错</strong></li>\n<li>函数无明确返回值</li>\n</ul>\n</li>\n<li>null用于表示尚未存在的对象。</li>\n<li><code>typeof(1)</code>和<code>typeof(NaN)</code>都是<code>number</code>，但<code>isNaN(NaN)</code>与<code>isNaN(1)</code>是不一样的。</li>\n<li>Number的<code>toString()</code>可以根据不同的基输出结果。</li>\n<li>String的<code>pasreInt()</code> 可以把字符串中的第一串数字字符转化成数字（0xA会被转化成10），会在第一个无效字符之前停止，同样也有基模式。</li>\n</ol>\n<p>##引用类型</p>\n<ol>\n<li>String可以有<code>indexof()</code>、<code>charAt()</code>、<code>valueOf()</code>、<code>toString()</code>等方法。</li>\n<li>String的<code>slice()</code>可以传负参数，其表示字符串长度加上负参数值，slice开始位置包含在返回值，终止位置不包含在返回值，从0开始计位置。</li>\n</ol>\n<p>##函数</p>\n<ol>\n<li>js的函数不支持重载，但是可以使用特殊对象arguments，无需指出参数名，就能访问它们。ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，其中，遗漏的函数以undefined传递给函数，多余的参数被忽略，因此可以通过arguments来简易模拟函数重载。<br><code>function a() {}</code>等价于<code>var a = function(){}</code>。</li>\n<li>函数实际上是功能完整的对象。Function类可以表示开发者定义的任何函数。<strong>函数名实际上是函数对象的引用值</strong>，<strong>函数可以作为参数传递给另外一个函数</strong>。</li>\n<li><p><strong>闭包</strong></p>\n<p><strong>闭包</strong>是指函数能使用函数外定义的变量。</p>\n</li>\n</ol>\n<pre><code>&lt;!--lang:javascript--&gt; \nvar iBaseNum = 10;\nfunction addNumbers(iNum1, iNum2) {\n    //闭包\n    function doAddition (){\n        return iNum1 + iNum2 + iBaseNum;\n    }\nreturn doAddition();\n} \n</code></pre><p> 闭包可以用来读取局部变量。</p>\n<pre><code>function f1(){\n    var n=999;\n    function f2(){\n       alert(n); // 999\n    }\n}\n\nfunction f1(){\n    var n=999;\n    function f2(){\n        alert(n); \n    }\n    return f2;//返回函数的引用\n}\nvar result=f1();// result =  f2\nresult(); // 999\n</code></pre><p> <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" title=\"学习Javascript闭包\" target=\"_blank\" rel=\"external\">闭包</a>主要用来<strong>读取函数内部的变量</strong>或者<strong>让这些变量的值始终保持在内存中</strong>。个人认为，闭包的关键在于返回了一个子函数，子函数可以调用父函数的变量，从而可以再外部调用到父函数内部的变量。这里的子函数如果是定义为全局变量，则直接通过调用子函数来实现访问内部变量。</p>\n","excerpt":"","more":"<p>#ECMAScript基础</p>\n<p>##原始类型</p>\n<ol>\n<li>原始类型有Undefined、Null、Bollean、Number和String。</li>\n<li>typeof用来判断一个值是否在某种类型的范围内，引用类型或者Null返回object，null被认为是对象的占位符。</li>\n<li>undefined： <ul>\n<li>声明的对象未初始化</li>\n<li>对象未定义：<strong>只能对未定义的对象使用typeof，使用其他运算符会报错</strong></li>\n<li>函数无明确返回值</li>\n</ul>\n</li>\n<li>null用于表示尚未存在的对象。</li>\n<li><code>typeof(1)</code>和<code>typeof(NaN)</code>都是<code>number</code>，但<code>isNaN(NaN)</code>与<code>isNaN(1)</code>是不一样的。</li>\n<li>Number的<code>toString()</code>可以根据不同的基输出结果。</li>\n<li>String的<code>pasreInt()</code> 可以把字符串中的第一串数字字符转化成数字（0xA会被转化成10），会在第一个无效字符之前停止，同样也有基模式。</li>\n</ol>\n<p>##引用类型</p>\n<ol>\n<li>String可以有<code>indexof()</code>、<code>charAt()</code>、<code>valueOf()</code>、<code>toString()</code>等方法。</li>\n<li>String的<code>slice()</code>可以传负参数，其表示字符串长度加上负参数值，slice开始位置包含在返回值，终止位置不包含在返回值，从0开始计位置。</li>\n</ol>\n<p>##函数</p>\n<ol>\n<li>js的函数不支持重载，但是可以使用特殊对象arguments，无需指出参数名，就能访问它们。ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，其中，遗漏的函数以undefined传递给函数，多余的参数被忽略，因此可以通过arguments来简易模拟函数重载。<br><code>function a() {}</code>等价于<code>var a = function(){}</code>。</li>\n<li>函数实际上是功能完整的对象。Function类可以表示开发者定义的任何函数。<strong>函数名实际上是函数对象的引用值</strong>，<strong>函数可以作为参数传递给另外一个函数</strong>。</li>\n<li><p><strong>闭包</strong></p>\n<p><strong>闭包</strong>是指函数能使用函数外定义的变量。</p>\n</li>\n</ol>\n<pre><code>&lt;!--lang:javascript--&gt; \nvar iBaseNum = 10;\nfunction addNumbers(iNum1, iNum2) {\n    //闭包\n    function doAddition (){\n        return iNum1 + iNum2 + iBaseNum;\n    }\nreturn doAddition();\n} \n</code></pre><p> 闭包可以用来读取局部变量。</p>\n<pre><code>function f1(){\n    var n=999;\n    function f2(){\n       alert(n); // 999\n    }\n}\n\nfunction f1(){\n    var n=999;\n    function f2(){\n        alert(n); \n    }\n    return f2;//返回函数的引用\n}\nvar result=f1();// result =  f2\nresult(); // 999\n</code></pre><p> <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" title=\"学习Javascript闭包\">闭包</a>主要用来<strong>读取函数内部的变量</strong>或者<strong>让这些变量的值始终保持在内存中</strong>。个人认为，闭包的关键在于返回了一个子函数，子函数可以调用父函数的变量，从而可以再外部调用到父函数内部的变量。这里的子函数如果是定义为全局变量，则直接通过调用子函数来实现访问内部变量。</p>\n"},{"title":"四月总结","date":"2015-05-05T13:43:02.000Z","_content":"##代码\n\n写了半天终于把task3功能全部写完，三个功能下来确实发现基础变的好很多，不再依赖其他外部的东西，很多东西理解还是不深入，继续读代码吧。\nmatlab上面关于配电网重构和台风预警的结合部分迟迟没有动笔，大约这个礼拜开始尝试着把配电网的地理位置坐标做出来吧。\n\n##论文\n\n终于写完了第一篇，交给老板看，看完这周末一定投出去。刚才写到这里为了杀死拖延症花了半个小时终于把论文的标题，作者信息等等全部写好发给了老板。\n\n##生活\n\n该踢球踢球，该锻炼锻炼，媳妇儿终于回大陆了，结束我一年支教，她一年留学的异地，开始一段新的她在家我在学校的异地。\n\n##感想\n\n四月很忙，不过好的事情是终于知道自己想要什么，自己对于科研也有了一定的想法，有了自己的一点理解，在代码方面也算是一点点的入门了。记住那句话：**跳出算法，回归物理意义。**","source":"_posts/april-review.md","raw":"title: \"四月总结\"\ndate: 2015-05-05 21:43:02\ntags: [日记]\n---\n##代码\n\n写了半天终于把task3功能全部写完，三个功能下来确实发现基础变的好很多，不再依赖其他外部的东西，很多东西理解还是不深入，继续读代码吧。\nmatlab上面关于配电网重构和台风预警的结合部分迟迟没有动笔，大约这个礼拜开始尝试着把配电网的地理位置坐标做出来吧。\n\n##论文\n\n终于写完了第一篇，交给老板看，看完这周末一定投出去。刚才写到这里为了杀死拖延症花了半个小时终于把论文的标题，作者信息等等全部写好发给了老板。\n\n##生活\n\n该踢球踢球，该锻炼锻炼，媳妇儿终于回大陆了，结束我一年支教，她一年留学的异地，开始一段新的她在家我在学校的异地。\n\n##感想\n\n四月很忙，不过好的事情是终于知道自己想要什么，自己对于科研也有了一定的想法，有了自己的一点理解，在代码方面也算是一点点的入门了。记住那句话：**跳出算法，回归物理意义。**","slug":"april-review","published":1,"updated":"2015-05-05T14:18:06.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83s000c5gbbsfmhmtmw","content":"<p>##代码</p>\n<p>写了半天终于把task3功能全部写完，三个功能下来确实发现基础变的好很多，不再依赖其他外部的东西，很多东西理解还是不深入，继续读代码吧。<br>matlab上面关于配电网重构和台风预警的结合部分迟迟没有动笔，大约这个礼拜开始尝试着把配电网的地理位置坐标做出来吧。</p>\n<p>##论文</p>\n<p>终于写完了第一篇，交给老板看，看完这周末一定投出去。刚才写到这里为了杀死拖延症花了半个小时终于把论文的标题，作者信息等等全部写好发给了老板。</p>\n<p>##生活</p>\n<p>该踢球踢球，该锻炼锻炼，媳妇儿终于回大陆了，结束我一年支教，她一年留学的异地，开始一段新的她在家我在学校的异地。</p>\n<p>##感想</p>\n<p>四月很忙，不过好的事情是终于知道自己想要什么，自己对于科研也有了一定的想法，有了自己的一点理解，在代码方面也算是一点点的入门了。记住那句话：<strong>跳出算法，回归物理意义。</strong></p>\n","excerpt":"","more":"<p>##代码</p>\n<p>写了半天终于把task3功能全部写完，三个功能下来确实发现基础变的好很多，不再依赖其他外部的东西，很多东西理解还是不深入，继续读代码吧。<br>matlab上面关于配电网重构和台风预警的结合部分迟迟没有动笔，大约这个礼拜开始尝试着把配电网的地理位置坐标做出来吧。</p>\n<p>##论文</p>\n<p>终于写完了第一篇，交给老板看，看完这周末一定投出去。刚才写到这里为了杀死拖延症花了半个小时终于把论文的标题，作者信息等等全部写好发给了老板。</p>\n<p>##生活</p>\n<p>该踢球踢球，该锻炼锻炼，媳妇儿终于回大陆了，结束我一年支教，她一年留学的异地，开始一段新的她在家我在学校的异地。</p>\n<p>##感想</p>\n<p>四月很忙，不过好的事情是终于知道自己想要什么，自己对于科研也有了一定的想法，有了自己的一点理解，在代码方面也算是一点点的入门了。记住那句话：<strong>跳出算法，回归物理意义。</strong></p>\n"},{"title":"继承","date":"2015-05-10T04:49:41.000Z","_content":"\n##对象冒充\n\n原理：构造函数使用this关键字给所有属性和方法赋值（采用类声明的构造函数方式）。以为构造函数只是一个函数，可以使ClassA的构造函数成为ClassB的方法，然后调用它。ClassB就会收到ClassA的构造函数中定义的属性和方法。这里，其实是把ClassA作为常规函数来建立继承机制，而不是作为构造函数。需要注意的是，所有的新属性和新方法都必须在删除了新方法之后定义，否则，新属性和新方法可能会被继承到的属性和方法覆盖。\n\n并且，对象冒充可以支持多重继承，同样的，如果继承的不同类中存在相同的方法和属性，也会存在前者被后者被覆盖的问题。\n\n随着对象冒充的流行，ECMAScript为Function对象加入了`call()`和`apply()`。\n\n* `call()`\n`call()`的第一个参数是obj，说明`fun.call(obj,arg1,arg2)`的`fun()`中的this关键字的值是obj，这样就可以将`call()`和对象冒充结合起来，将对象冒充的中赋值、调用和删除替换掉。\n\n        function ClassB(sColor, sName) {\n            //this.newMethod = ClassA;\n            //this.newMethod(sColor);\n            //delete this.newMethod;\n            ClassA.call(ClassB,sColor);\n\n            this.name = sName;\n            this.sayName = function()｛\n                console.log(this.name);\n            ｝;\n        }\n\n* `apply()`\n`apply()`方法有两个参数，用作this的对象和要传递给函数的参数的数组。\n\n##原型链\n\n原理：prototype对象是一个模板，要实例化的对象都是以这个模板为基础，prototype对象的任何属性和方法都被传递给那个类的所有实例。原型链利用这种功能来实现继承机制。\n\n        function ClassA() {\n        };\n\n        ClassA.prototype.color = \"red\";\n\n        function ClassB() {\n        };\n\n        **ClassB.prototype = new ClassA();**\n\n与对象冒充相似，子类的所有属性和方法必须出现在prototype属性被赋值后，因为prototype属性被替换成了新对象。\n原型链的弊端是不支持多重继承，prototype会被覆盖。\n\n## 混合方式\n创建类的最好方式是用构造函数方式定义属性，用原型方式定义方法，同样，对于继承，也是用对象冒充继承构造函数属性，用原型链继承函数的方法。","source":"_posts/js-notes3.md","raw":"title: \"继承\"\ndate: 2015-05-10 12:49:41\ntags: [js,note]\n---\n\n##对象冒充\n\n原理：构造函数使用this关键字给所有属性和方法赋值（采用类声明的构造函数方式）。以为构造函数只是一个函数，可以使ClassA的构造函数成为ClassB的方法，然后调用它。ClassB就会收到ClassA的构造函数中定义的属性和方法。这里，其实是把ClassA作为常规函数来建立继承机制，而不是作为构造函数。需要注意的是，所有的新属性和新方法都必须在删除了新方法之后定义，否则，新属性和新方法可能会被继承到的属性和方法覆盖。\n\n并且，对象冒充可以支持多重继承，同样的，如果继承的不同类中存在相同的方法和属性，也会存在前者被后者被覆盖的问题。\n\n随着对象冒充的流行，ECMAScript为Function对象加入了`call()`和`apply()`。\n\n* `call()`\n`call()`的第一个参数是obj，说明`fun.call(obj,arg1,arg2)`的`fun()`中的this关键字的值是obj，这样就可以将`call()`和对象冒充结合起来，将对象冒充的中赋值、调用和删除替换掉。\n\n        function ClassB(sColor, sName) {\n            //this.newMethod = ClassA;\n            //this.newMethod(sColor);\n            //delete this.newMethod;\n            ClassA.call(ClassB,sColor);\n\n            this.name = sName;\n            this.sayName = function()｛\n                console.log(this.name);\n            ｝;\n        }\n\n* `apply()`\n`apply()`方法有两个参数，用作this的对象和要传递给函数的参数的数组。\n\n##原型链\n\n原理：prototype对象是一个模板，要实例化的对象都是以这个模板为基础，prototype对象的任何属性和方法都被传递给那个类的所有实例。原型链利用这种功能来实现继承机制。\n\n        function ClassA() {\n        };\n\n        ClassA.prototype.color = \"red\";\n\n        function ClassB() {\n        };\n\n        **ClassB.prototype = new ClassA();**\n\n与对象冒充相似，子类的所有属性和方法必须出现在prototype属性被赋值后，因为prototype属性被替换成了新对象。\n原型链的弊端是不支持多重继承，prototype会被覆盖。\n\n## 混合方式\n创建类的最好方式是用构造函数方式定义属性，用原型方式定义方法，同样，对于继承，也是用对象冒充继承构造函数属性，用原型链继承函数的方法。","slug":"js-notes3","published":1,"updated":"2016-04-01T14:48:42.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia83v000e5gbb9bed6ddy","content":"<p>##对象冒充</p>\n<p>原理：构造函数使用this关键字给所有属性和方法赋值（采用类声明的构造函数方式）。以为构造函数只是一个函数，可以使ClassA的构造函数成为ClassB的方法，然后调用它。ClassB就会收到ClassA的构造函数中定义的属性和方法。这里，其实是把ClassA作为常规函数来建立继承机制，而不是作为构造函数。需要注意的是，所有的新属性和新方法都必须在删除了新方法之后定义，否则，新属性和新方法可能会被继承到的属性和方法覆盖。</p>\n<p>并且，对象冒充可以支持多重继承，同样的，如果继承的不同类中存在相同的方法和属性，也会存在前者被后者被覆盖的问题。</p>\n<p>随着对象冒充的流行，ECMAScript为Function对象加入了<code>call()</code>和<code>apply()</code>。</p>\n<ul>\n<li><p><code>call()</code><br><code>call()</code>的第一个参数是obj，说明<code>fun.call(obj,arg1,arg2)</code>的<code>fun()</code>中的this关键字的值是obj，这样就可以将<code>call()</code>和对象冒充结合起来，将对象冒充的中赋值、调用和删除替换掉。</p>\n<pre><code>function ClassB(sColor, sName) {\n    //this.newMethod = ClassA;\n    //this.newMethod(sColor);\n    //delete this.newMethod;\n    ClassA.call(ClassB,sColor);\n\n    this.name = sName;\n    this.sayName = function()｛\n        console.log(this.name);\n    ｝;\n}\n</code></pre></li>\n<li><p><code>apply()</code><br><code>apply()</code>方法有两个参数，用作this的对象和要传递给函数的参数的数组。</p>\n</li>\n</ul>\n<p>##原型链</p>\n<p>原理：prototype对象是一个模板，要实例化的对象都是以这个模板为基础，prototype对象的任何属性和方法都被传递给那个类的所有实例。原型链利用这种功能来实现继承机制。</p>\n<pre><code>function ClassA() {\n};\n\nClassA.prototype.color = &quot;red&quot;;\n\nfunction ClassB() {\n};\n\n**ClassB.prototype = new ClassA();**\n</code></pre><p>与对象冒充相似，子类的所有属性和方法必须出现在prototype属性被赋值后，因为prototype属性被替换成了新对象。<br>原型链的弊端是不支持多重继承，prototype会被覆盖。</p>\n<h2 id=\"混合方式\"><a href=\"#混合方式\" class=\"headerlink\" title=\"混合方式\"></a>混合方式</h2><p>创建类的最好方式是用构造函数方式定义属性，用原型方式定义方法，同样，对于继承，也是用对象冒充继承构造函数属性，用原型链继承函数的方法。</p>\n","excerpt":"","more":"<p>##对象冒充</p>\n<p>原理：构造函数使用this关键字给所有属性和方法赋值（采用类声明的构造函数方式）。以为构造函数只是一个函数，可以使ClassA的构造函数成为ClassB的方法，然后调用它。ClassB就会收到ClassA的构造函数中定义的属性和方法。这里，其实是把ClassA作为常规函数来建立继承机制，而不是作为构造函数。需要注意的是，所有的新属性和新方法都必须在删除了新方法之后定义，否则，新属性和新方法可能会被继承到的属性和方法覆盖。</p>\n<p>并且，对象冒充可以支持多重继承，同样的，如果继承的不同类中存在相同的方法和属性，也会存在前者被后者被覆盖的问题。</p>\n<p>随着对象冒充的流行，ECMAScript为Function对象加入了<code>call()</code>和<code>apply()</code>。</p>\n<ul>\n<li><p><code>call()</code><br><code>call()</code>的第一个参数是obj，说明<code>fun.call(obj,arg1,arg2)</code>的<code>fun()</code>中的this关键字的值是obj，这样就可以将<code>call()</code>和对象冒充结合起来，将对象冒充的中赋值、调用和删除替换掉。</p>\n<pre><code>function ClassB(sColor, sName) {\n    //this.newMethod = ClassA;\n    //this.newMethod(sColor);\n    //delete this.newMethod;\n    ClassA.call(ClassB,sColor);\n\n    this.name = sName;\n    this.sayName = function()｛\n        console.log(this.name);\n    ｝;\n}\n</code></pre></li>\n<li><p><code>apply()</code><br><code>apply()</code>方法有两个参数，用作this的对象和要传递给函数的参数的数组。</p>\n</li>\n</ul>\n<p>##原型链</p>\n<p>原理：prototype对象是一个模板，要实例化的对象都是以这个模板为基础，prototype对象的任何属性和方法都被传递给那个类的所有实例。原型链利用这种功能来实现继承机制。</p>\n<pre><code>function ClassA() {\n};\n\nClassA.prototype.color = &quot;red&quot;;\n\nfunction ClassB() {\n};\n\n**ClassB.prototype = new ClassA();**\n</code></pre><p>与对象冒充相似，子类的所有属性和方法必须出现在prototype属性被赋值后，因为prototype属性被替换成了新对象。<br>原型链的弊端是不支持多重继承，prototype会被覆盖。</p>\n<h2 id=\"混合方式\"><a href=\"#混合方式\" class=\"headerlink\" title=\"混合方式\"></a>混合方式</h2><p>创建类的最好方式是用构造函数方式定义属性，用原型方式定义方法，同样，对于继承，也是用对象冒充继承构造函数属性，用原型链继承函数的方法。</p>\n"},{"title":"前端工作流的一些尝试","date":"2016-03-27T03:49:51.000Z","_content":"\n最近一直在研究React，在了解完React的一些写法和Flux构建之后，自然开始想要让自己的代码更加模块化一点，或者说组件化一点。我希望自己今后的目录应该是图1这个样子。\n\n![图1](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazkjo84j206q0ck0tf.jpg \"图1\")\n\n图中项目采用了Flux构架，因此会有actions|stores|utils，并且不同Router会映射到不同pages，而体现组件化的就是components文件夹，其结构如图2所示。\n\n![图2](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazlek6ej206704xt8v.jpg \"图2\")\n\n可以看到里面包含两个组件，每个组件又包含了不同逻辑、视图。我觉得这样来进行应用的编写更能够凸显图3中对于组件化的定义。\n\n![图3](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazloo4kj20gh0a7my9.jpg \"图3\")\n\n这样一来就需要采用一些比较自动化的构建工作流，既然采用了React，那么就必然绕不开webpack，而就在前一年，gulp又那么火，所以我这里主要有两种情况，分别由于我不同的目的。\n\n##webapck\n关于webpack的介绍如下：\n{% blockquote hulufei https://hulufei.gitbooks.io/react-tutorial/content/webpack.html Webpack 配置 React 开发环境 %}\nWebpack是一个前端资源加载/打包工具，只需要相对简单的配置就可以提供前端工程化需要的各种功能，并且如果有需要它还可以被整合到其他比如 Grunt / Gulp 的工作流。\n{% endblockquote %}\n\n我的配置如下：\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar indexPath = path.resolve(__dirname, 'src/index.js');\nvar outputPath = path.resolve(__dirname, 'public');\nmodule.exports = {\n  entry: [\n    'webpack/hot/dev-server',\n    indexPath\n  ],\n  output: {\n    path: outputPath,\n    filename: 'bundle.js'\n  },\n  devtool: 'source-map',\n  'display-error-details': true,\n  module: {\n    loaders: [\n      {\n        test: /\\.js?$/,\n        exclude: /node_modules/,\n        loaders: ['react-hot', 'babel?presets[]=react,presets[]=es2015,presets[]=stage-0']\n      },\n      {\n        test: /.less$/,\n        loader: ExtractTextPlugin.extract('css!less')\n      },\n      {\n        test: /\\.(jpg|png|mp3|svg)$/,\n        loaders: ['file?name=assets/[name].[ext]']\n      }\n    ]\n  },\n  plugins: [\n    // new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\nnew webpack.optimize.CommonsChunkPlugin(\"commons\", \"commons.js\"),\n    new webpack.ProvidePlugin({\n      'React': path.resolve(__dirname, \"node_modules/react/react\"),\n      'ReactDOM': path.resolve(__dirname, \"node_modules/react-dom/dist/react-dom\"),\n      \"jQuery\": path.resolve(__dirname, \"node_modules/jquery/dist/jquery\"),\n      \"$\": path.resolve(__dirname, \"node_modules/jquery/dist/jquery\")\n    }),\n    new ExtractTextPlugin(\"[name].css?[hash]-[chunkhash]\", {\n      allChunks: true,\n      disable: false\n    }),\n    new HtmlWebpackPlugin({\n      title: 'React Blog in ES6',\n      template: './src/index.html'\n    })\n  ]\n};\n```\n\n首先是在entry上定义入口文件，然后再output定义生成文件，loaders里面是对于不同的文件的采用的loader。\n\n对于React需要用到babel来进行转化，并且preset应该有react、es2015和stage-0。这样就可以在文件中按照es6的写法来写react了，会方便很多，因为es6提供了很多新的语法糖，还是挺适合React的。\n\n另外，对于不同styles可以采用不同loader，比如我采用的less那么就需要使用css和less的loader。对于一些静态文件，比如图片、svg等，则需要用到fileloader。\n\n最后就是一些插件，CommonsChunkPlugin用来将一些反复依赖的到第三方插件全部打包到一个common文件中，并且可以别名的形式出现，这样就不需要再文件中反复出现`import React from 'react'`这样的引用，顺便可以在eslint中将这些规则关闭，可以节省一定的代码量。ExtractTextPlugin和HtmlWebpackPlugin这两个插件可以生成html文件并且自动引用样式文件。\n\n这样一来，在package.json文件中，只要在scripts就可以这样写：\n\n    \"scripts\": {\n        \"build\": \"webpack --progress --colors --watch\",\n        \"dev\": \"webpack-dev-server --progress --hot --inline --colors --content-base build\",\n        \"dist\": \"NODE_ENV=production webpack --progress --colors\"\n    }\n\n就可以很方便地进行热开发已经最后的部署等操作。","source":"_posts/前端工作流的一些尝试.md","raw":"title: 前端工作流的一些尝试\ntags:\n  - 工程化\n  - gulp\n  - webpack\ncategories:\n  - 前端\ndate: 2016-03-27 11:49:51\n---\n\n最近一直在研究React，在了解完React的一些写法和Flux构建之后，自然开始想要让自己的代码更加模块化一点，或者说组件化一点。我希望自己今后的目录应该是图1这个样子。\n\n![图1](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazkjo84j206q0ck0tf.jpg \"图1\")\n\n图中项目采用了Flux构架，因此会有actions|stores|utils，并且不同Router会映射到不同pages，而体现组件化的就是components文件夹，其结构如图2所示。\n\n![图2](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazlek6ej206704xt8v.jpg \"图2\")\n\n可以看到里面包含两个组件，每个组件又包含了不同逻辑、视图。我觉得这样来进行应用的编写更能够凸显图3中对于组件化的定义。\n\n![图3](http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazloo4kj20gh0a7my9.jpg \"图3\")\n\n这样一来就需要采用一些比较自动化的构建工作流，既然采用了React，那么就必然绕不开webpack，而就在前一年，gulp又那么火，所以我这里主要有两种情况，分别由于我不同的目的。\n\n##webapck\n关于webpack的介绍如下：\n{% blockquote hulufei https://hulufei.gitbooks.io/react-tutorial/content/webpack.html Webpack 配置 React 开发环境 %}\nWebpack是一个前端资源加载/打包工具，只需要相对简单的配置就可以提供前端工程化需要的各种功能，并且如果有需要它还可以被整合到其他比如 Grunt / Gulp 的工作流。\n{% endblockquote %}\n\n我的配置如下：\n\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar indexPath = path.resolve(__dirname, 'src/index.js');\nvar outputPath = path.resolve(__dirname, 'public');\nmodule.exports = {\n  entry: [\n    'webpack/hot/dev-server',\n    indexPath\n  ],\n  output: {\n    path: outputPath,\n    filename: 'bundle.js'\n  },\n  devtool: 'source-map',\n  'display-error-details': true,\n  module: {\n    loaders: [\n      {\n        test: /\\.js?$/,\n        exclude: /node_modules/,\n        loaders: ['react-hot', 'babel?presets[]=react,presets[]=es2015,presets[]=stage-0']\n      },\n      {\n        test: /.less$/,\n        loader: ExtractTextPlugin.extract('css!less')\n      },\n      {\n        test: /\\.(jpg|png|mp3|svg)$/,\n        loaders: ['file?name=assets/[name].[ext]']\n      }\n    ]\n  },\n  plugins: [\n    // new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\nnew webpack.optimize.CommonsChunkPlugin(\"commons\", \"commons.js\"),\n    new webpack.ProvidePlugin({\n      'React': path.resolve(__dirname, \"node_modules/react/react\"),\n      'ReactDOM': path.resolve(__dirname, \"node_modules/react-dom/dist/react-dom\"),\n      \"jQuery\": path.resolve(__dirname, \"node_modules/jquery/dist/jquery\"),\n      \"$\": path.resolve(__dirname, \"node_modules/jquery/dist/jquery\")\n    }),\n    new ExtractTextPlugin(\"[name].css?[hash]-[chunkhash]\", {\n      allChunks: true,\n      disable: false\n    }),\n    new HtmlWebpackPlugin({\n      title: 'React Blog in ES6',\n      template: './src/index.html'\n    })\n  ]\n};\n```\n\n首先是在entry上定义入口文件，然后再output定义生成文件，loaders里面是对于不同的文件的采用的loader。\n\n对于React需要用到babel来进行转化，并且preset应该有react、es2015和stage-0。这样就可以在文件中按照es6的写法来写react了，会方便很多，因为es6提供了很多新的语法糖，还是挺适合React的。\n\n另外，对于不同styles可以采用不同loader，比如我采用的less那么就需要使用css和less的loader。对于一些静态文件，比如图片、svg等，则需要用到fileloader。\n\n最后就是一些插件，CommonsChunkPlugin用来将一些反复依赖的到第三方插件全部打包到一个common文件中，并且可以别名的形式出现，这样就不需要再文件中反复出现`import React from 'react'`这样的引用，顺便可以在eslint中将这些规则关闭，可以节省一定的代码量。ExtractTextPlugin和HtmlWebpackPlugin这两个插件可以生成html文件并且自动引用样式文件。\n\n这样一来，在package.json文件中，只要在scripts就可以这样写：\n\n    \"scripts\": {\n        \"build\": \"webpack --progress --colors --watch\",\n        \"dev\": \"webpack-dev-server --progress --hot --inline --colors --content-base build\",\n        \"dist\": \"NODE_ENV=production webpack --progress --colors\"\n    }\n\n就可以很方便地进行热开发已经最后的部署等操作。","slug":"前端工作流的一些尝试","published":1,"updated":"2016-05-10T13:19:27.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia840000h5gbbnrn6uvtk","content":"<p>最近一直在研究React，在了解完React的一些写法和Flux构建之后，自然开始想要让自己的代码更加模块化一点，或者说组件化一点。我希望自己今后的目录应该是图1这个样子。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazkjo84j206q0ck0tf.jpg\" alt=\"图1\" title=\"图1\"></p>\n<p>图中项目采用了Flux构架，因此会有actions|stores|utils，并且不同Router会映射到不同pages，而体现组件化的就是components文件夹，其结构如图2所示。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazlek6ej206704xt8v.jpg\" alt=\"图2\" title=\"图2\"></p>\n<p>可以看到里面包含两个组件，每个组件又包含了不同逻辑、视图。我觉得这样来进行应用的编写更能够凸显图3中对于组件化的定义。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazloo4kj20gh0a7my9.jpg\" alt=\"图3\" title=\"图3\"></p>\n<p>这样一来就需要采用一些比较自动化的构建工作流，既然采用了React，那么就必然绕不开webpack，而就在前一年，gulp又那么火，所以我这里主要有两种情况，分别由于我不同的目的。</p>\n<p>##webapck<br>关于webpack的介绍如下：<br><blockquote><p>Webpack是一个前端资源加载/打包工具，只需要相对简单的配置就可以提供前端工程化需要的各种功能，并且如果有需要它还可以被整合到其他比如 Grunt / Gulp 的工作流。</p>\n<footer><strong>hulufei</strong><cite><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\" target=\"_blank\" rel=\"external\">Webpack 配置 React 开发环境</a></cite></footer></blockquote></p>\n<p>我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">var indexPath = path.resolve(__dirname, &apos;src/index.js&apos;);</span><br><span class=\"line\">var outputPath = path.resolve(__dirname, &apos;public&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &apos;webpack/hot/dev-server&apos;,</span><br><span class=\"line\">    indexPath</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: outputPath,</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: &apos;source-map&apos;,</span><br><span class=\"line\">  &apos;display-error-details&apos;: true,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js?$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loaders: [&apos;react-hot&apos;, &apos;babel?presets[]=react,presets[]=es2015,presets[]=stage-0&apos;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /.less$/,</span><br><span class=\"line\">        loader: ExtractTextPlugin.extract(&apos;css!less&apos;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(jpg|png|mp3|svg)$/,</span><br><span class=\"line\">        loaders: [&apos;file?name=assets/[name].[ext]&apos;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    new webpack.NoErrorsPlugin(),</span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&quot;commons&quot;, &quot;commons.js&quot;),</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      &apos;React&apos;: path.resolve(__dirname, &quot;node_modules/react/react&quot;),</span><br><span class=\"line\">      &apos;ReactDOM&apos;: path.resolve(__dirname, &quot;node_modules/react-dom/dist/react-dom&quot;),</span><br><span class=\"line\">      &quot;jQuery&quot;: path.resolve(__dirname, &quot;node_modules/jquery/dist/jquery&quot;),</span><br><span class=\"line\">      &quot;$&quot;: path.resolve(__dirname, &quot;node_modules/jquery/dist/jquery&quot;)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new ExtractTextPlugin(&quot;[name].css?[hash]-[chunkhash]&quot;, &#123;</span><br><span class=\"line\">      allChunks: true,</span><br><span class=\"line\">      disable: false</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: &apos;React Blog in ES6&apos;,</span><br><span class=\"line\">      template: &apos;./src/index.html&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先是在entry上定义入口文件，然后再output定义生成文件，loaders里面是对于不同的文件的采用的loader。</p>\n<p>对于React需要用到babel来进行转化，并且preset应该有react、es2015和stage-0。这样就可以在文件中按照es6的写法来写react了，会方便很多，因为es6提供了很多新的语法糖，还是挺适合React的。</p>\n<p>另外，对于不同styles可以采用不同loader，比如我采用的less那么就需要使用css和less的loader。对于一些静态文件，比如图片、svg等，则需要用到fileloader。</p>\n<p>最后就是一些插件，CommonsChunkPlugin用来将一些反复依赖的到第三方插件全部打包到一个common文件中，并且可以别名的形式出现，这样就不需要再文件中反复出现<code>import React from &#39;react&#39;</code>这样的引用，顺便可以在eslint中将这些规则关闭，可以节省一定的代码量。ExtractTextPlugin和HtmlWebpackPlugin这两个插件可以生成html文件并且自动引用样式文件。</p>\n<p>这样一来，在package.json文件中，只要在scripts就可以这样写：</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack --progress --colors --watch&quot;,\n    &quot;dev&quot;: &quot;webpack-dev-server --progress --hot --inline --colors --content-base build&quot;,\n    &quot;dist&quot;: &quot;NODE_ENV=production webpack --progress --colors&quot;\n}\n</code></pre><p>就可以很方便地进行热开发已经最后的部署等操作。</p>\n","excerpt":"","more":"<p>最近一直在研究React，在了解完React的一些写法和Flux构建之后，自然开始想要让自己的代码更加模块化一点，或者说组件化一点。我希望自己今后的目录应该是图1这个样子。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazkjo84j206q0ck0tf.jpg\" alt=\"图1\" title=\"图1\"></p>\n<p>图中项目采用了Flux构架，因此会有actions|stores|utils，并且不同Router会映射到不同pages，而体现组件化的就是components文件夹，其结构如图2所示。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazlek6ej206704xt8v.jpg\" alt=\"图2\" title=\"图2\"></p>\n<p>可以看到里面包含两个组件，每个组件又包含了不同逻辑、视图。我觉得这样来进行应用的编写更能够凸显图3中对于组件化的定义。</p>\n<p><img src=\"http://ww4.sinaimg.cn/mw690/7314808bgw1f2bazloo4kj20gh0a7my9.jpg\" alt=\"图3\" title=\"图3\"></p>\n<p>这样一来就需要采用一些比较自动化的构建工作流，既然采用了React，那么就必然绕不开webpack，而就在前一年，gulp又那么火，所以我这里主要有两种情况，分别由于我不同的目的。</p>\n<p>##webapck<br>关于webpack的介绍如下：<br><blockquote><p>Webpack是一个前端资源加载/打包工具，只需要相对简单的配置就可以提供前端工程化需要的各种功能，并且如果有需要它还可以被整合到其他比如 Grunt / Gulp 的工作流。</p>\n<footer><strong>hulufei</strong><cite><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/webpack.html\">Webpack 配置 React 开发环境</a></cite></footer></blockquote></p>\n<p>我的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\">var ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</span><br><span class=\"line\">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class=\"line\">var indexPath = path.resolve(__dirname, &apos;src/index.js&apos;);</span><br><span class=\"line\">var outputPath = path.resolve(__dirname, &apos;public&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &apos;webpack/hot/dev-server&apos;,</span><br><span class=\"line\">    indexPath</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: outputPath,</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: &apos;source-map&apos;,</span><br><span class=\"line\">  &apos;display-error-details&apos;: true,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js?$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loaders: [&apos;react-hot&apos;, &apos;babel?presets[]=react,presets[]=es2015,presets[]=stage-0&apos;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /.less$/,</span><br><span class=\"line\">        loader: ExtractTextPlugin.extract(&apos;css!less&apos;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(jpg|png|mp3|svg)$/,</span><br><span class=\"line\">        loaders: [&apos;file?name=assets/[name].[ext]&apos;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // new webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    new webpack.NoErrorsPlugin(),</span><br><span class=\"line\">new webpack.optimize.CommonsChunkPlugin(&quot;commons&quot;, &quot;commons.js&quot;),</span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      &apos;React&apos;: path.resolve(__dirname, &quot;node_modules/react/react&quot;),</span><br><span class=\"line\">      &apos;ReactDOM&apos;: path.resolve(__dirname, &quot;node_modules/react-dom/dist/react-dom&quot;),</span><br><span class=\"line\">      &quot;jQuery&quot;: path.resolve(__dirname, &quot;node_modules/jquery/dist/jquery&quot;),</span><br><span class=\"line\">      &quot;$&quot;: path.resolve(__dirname, &quot;node_modules/jquery/dist/jquery&quot;)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new ExtractTextPlugin(&quot;[name].css?[hash]-[chunkhash]&quot;, &#123;</span><br><span class=\"line\">      allChunks: true,</span><br><span class=\"line\">      disable: false</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: &apos;React Blog in ES6&apos;,</span><br><span class=\"line\">      template: &apos;./src/index.html&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>首先是在entry上定义入口文件，然后再output定义生成文件，loaders里面是对于不同的文件的采用的loader。</p>\n<p>对于React需要用到babel来进行转化，并且preset应该有react、es2015和stage-0。这样就可以在文件中按照es6的写法来写react了，会方便很多，因为es6提供了很多新的语法糖，还是挺适合React的。</p>\n<p>另外，对于不同styles可以采用不同loader，比如我采用的less那么就需要使用css和less的loader。对于一些静态文件，比如图片、svg等，则需要用到fileloader。</p>\n<p>最后就是一些插件，CommonsChunkPlugin用来将一些反复依赖的到第三方插件全部打包到一个common文件中，并且可以别名的形式出现，这样就不需要再文件中反复出现<code>import React from &#39;react&#39;</code>这样的引用，顺便可以在eslint中将这些规则关闭，可以节省一定的代码量。ExtractTextPlugin和HtmlWebpackPlugin这两个插件可以生成html文件并且自动引用样式文件。</p>\n<p>这样一来，在package.json文件中，只要在scripts就可以这样写：</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack --progress --colors --watch&quot;,\n    &quot;dev&quot;: &quot;webpack-dev-server --progress --hot --inline --colors --content-base build&quot;,\n    &quot;dist&quot;: &quot;NODE_ENV=production webpack --progress --colors&quot;\n}\n</code></pre><p>就可以很方便地进行热开发已经最后的部署等操作。</p>\n"},{"title":"对象基础","date":"2015-05-08T06:43:38.000Z","_content":"\n##定义\n* 对象：属性的无序结合，每个属性存放一个原始值、对象或者函数。每个对象由类定义，定义了对象的接口（开发者访问的属性和方法），内部工作（使属性和方法发挥作用的代码）。\n* 实例：程序使用类创建对象时，生成的对象叫做类的实例。每个实例的行为相同，但是实例处理一组独立的数据。创建过程叫做实例化。\n* ECMA-262类：类是对象的配方。\n* ECMA-262对象：对象由特性（attribute）构成，特性可以是原始值，也可以是引用值，如果特性存放的是函数，它将被看作对象的方法，否则该特性被看错属性。\n* 引用类型：通常叫作类。在ECMAScript中，不能访问对象的物理表示，只能访问对象的引用。每次创建对象，存储在变量中的都是该对象的引用，而不是对象本身。\n\n\n    var a = {c:1, b:2}\n    c = a\n    c.c=2\n    c\n    Object {c: 2, b: 2}\n    a\n    Object {c: 2, b: 2}\n所以在对于对象的操作，比如复制中，会遇到深度复制这样的问题，要确保复制的不是引用。\n\n##对象的类型\n###本地对象\n* Array\n主要方法有：\n1. `join`、`split`、`slice`、`pop`、`shift`、`push`，Array对象的动作像一个栈，是后进先出的。通过`shift`、`push`可以使Array对象有队列一样的动作。\n2. `sort`、`reverse`与数组项的顺序有关。`reverse`使数组倒序，`sort`根据数组项的值升序为他们排序。`sort`是将所有值转化为字符串，然后根据自负代码比较数组项，可以通过`sort（obj,fun(){}）`设置排序规则来进行排序。\n3. `splice`用来把数据项插入数组中部，可以用来：删除`arr.splice(0,2)`、插入`arr.splice(2,0,\"insertContent\")`、替换`arr.splice(2,1,\"replaceContent\")`。\n\n* Date\nDate类对UTC日期和时间有很强的依赖性，需要考虑时区、夏时令等情况。并且覆盖了`valueOf`、`toString`方法。\n\n###内置对象\n\n定义：由ECMAScript实现提供的、独立于宿主环境的所有对象，在ECMAScript程序开始执行时出现。ECMA-262定义了两个内置对象，即Global和Math。\n\n* Global\n\nGlobal实际上根本不存在。Global几个比较重要的方法有`encodeURI`系列，用来处理URI；`eval`用来吧参数解释为真正的ECMAScript语句，操作Json时候用到过。\n另外，**在ECMAScript中不存在独立的函数，所有函数都必须是某个对象的方法**。\n\n###宿主对象\n\n定义：所有非本地对象都是宿主对象。\n\n* this\nthis用在对象的方法中，关键字this总是只想调用该方法的对象。通过this可以在任意多个地方重用同一个函数。\n\n##定义类或对象\n\n###工厂方式\n\n    function createCar() {\n        var oTempCar = new Object;\n        oTempCar.color = \"red\";\n        oTempCar.showColor = function() {\n            console.log(this.color)\n        };\n        \n        return oTempCar;\n    }\n    \n    var oCar1 = createCar();\n     \n这样可以通过调用函数来创建新对象，但是每个对象都会有一个版本的`showColor`，因此需要通过原型方式来进行定义类。\n\n###构造函数方式\n\n    function Car() {\n        this.color = \"red\";\n        this.showColor = function() {\n            console.log(this.color)\n        };\n        \n    }\n    \n    var oCar1 = new Car();\n    \n同样地，也会重复生成函数。\n\n###原型方式\n\n    function Car() {\n        this.prototype.color = \"red\";\n        this.prototype.showColor = function() {\n            console.log(this.color)\n        };\n        \n    }\n    \n    var oCar1 = new Car();\n在调用`new Car()`时，原型的所有属性都被赋予也要创建的对象，也就是说所有的Car实例存放的都是指向`showColor（）`的指针。然而，由于都是指向同一个位置，如果改变某个实例的属性，其他所有实例的该属性都会改变。因此需要混合构造函数/原型方式来进行创建对象。\n\n###混合方式\n\n    function Car() {\n        this.color = \"red\";\n    }\n    Car.prototype.showColor = function() {\n        console.log(this.color)\n    };\n    \n##对象修改\n通过`prototype`可以创建新方法，重新定义已有方法。","source":"_posts/js-notes2.md","raw":"title: \"对象基础\"\ndate: 2015-05-08 14:43:38\ntags: [js,note]\n---\n\n##定义\n* 对象：属性的无序结合，每个属性存放一个原始值、对象或者函数。每个对象由类定义，定义了对象的接口（开发者访问的属性和方法），内部工作（使属性和方法发挥作用的代码）。\n* 实例：程序使用类创建对象时，生成的对象叫做类的实例。每个实例的行为相同，但是实例处理一组独立的数据。创建过程叫做实例化。\n* ECMA-262类：类是对象的配方。\n* ECMA-262对象：对象由特性（attribute）构成，特性可以是原始值，也可以是引用值，如果特性存放的是函数，它将被看作对象的方法，否则该特性被看错属性。\n* 引用类型：通常叫作类。在ECMAScript中，不能访问对象的物理表示，只能访问对象的引用。每次创建对象，存储在变量中的都是该对象的引用，而不是对象本身。\n\n\n    var a = {c:1, b:2}\n    c = a\n    c.c=2\n    c\n    Object {c: 2, b: 2}\n    a\n    Object {c: 2, b: 2}\n所以在对于对象的操作，比如复制中，会遇到深度复制这样的问题，要确保复制的不是引用。\n\n##对象的类型\n###本地对象\n* Array\n主要方法有：\n1. `join`、`split`、`slice`、`pop`、`shift`、`push`，Array对象的动作像一个栈，是后进先出的。通过`shift`、`push`可以使Array对象有队列一样的动作。\n2. `sort`、`reverse`与数组项的顺序有关。`reverse`使数组倒序，`sort`根据数组项的值升序为他们排序。`sort`是将所有值转化为字符串，然后根据自负代码比较数组项，可以通过`sort（obj,fun(){}）`设置排序规则来进行排序。\n3. `splice`用来把数据项插入数组中部，可以用来：删除`arr.splice(0,2)`、插入`arr.splice(2,0,\"insertContent\")`、替换`arr.splice(2,1,\"replaceContent\")`。\n\n* Date\nDate类对UTC日期和时间有很强的依赖性，需要考虑时区、夏时令等情况。并且覆盖了`valueOf`、`toString`方法。\n\n###内置对象\n\n定义：由ECMAScript实现提供的、独立于宿主环境的所有对象，在ECMAScript程序开始执行时出现。ECMA-262定义了两个内置对象，即Global和Math。\n\n* Global\n\nGlobal实际上根本不存在。Global几个比较重要的方法有`encodeURI`系列，用来处理URI；`eval`用来吧参数解释为真正的ECMAScript语句，操作Json时候用到过。\n另外，**在ECMAScript中不存在独立的函数，所有函数都必须是某个对象的方法**。\n\n###宿主对象\n\n定义：所有非本地对象都是宿主对象。\n\n* this\nthis用在对象的方法中，关键字this总是只想调用该方法的对象。通过this可以在任意多个地方重用同一个函数。\n\n##定义类或对象\n\n###工厂方式\n\n    function createCar() {\n        var oTempCar = new Object;\n        oTempCar.color = \"red\";\n        oTempCar.showColor = function() {\n            console.log(this.color)\n        };\n        \n        return oTempCar;\n    }\n    \n    var oCar1 = createCar();\n     \n这样可以通过调用函数来创建新对象，但是每个对象都会有一个版本的`showColor`，因此需要通过原型方式来进行定义类。\n\n###构造函数方式\n\n    function Car() {\n        this.color = \"red\";\n        this.showColor = function() {\n            console.log(this.color)\n        };\n        \n    }\n    \n    var oCar1 = new Car();\n    \n同样地，也会重复生成函数。\n\n###原型方式\n\n    function Car() {\n        this.prototype.color = \"red\";\n        this.prototype.showColor = function() {\n            console.log(this.color)\n        };\n        \n    }\n    \n    var oCar1 = new Car();\n在调用`new Car()`时，原型的所有属性都被赋予也要创建的对象，也就是说所有的Car实例存放的都是指向`showColor（）`的指针。然而，由于都是指向同一个位置，如果改变某个实例的属性，其他所有实例的该属性都会改变。因此需要混合构造函数/原型方式来进行创建对象。\n\n###混合方式\n\n    function Car() {\n        this.color = \"red\";\n    }\n    Car.prototype.showColor = function() {\n        console.log(this.color)\n    };\n    \n##对象修改\n通过`prototype`可以创建新方法，重新定义已有方法。","slug":"js-notes2","published":1,"updated":"2015-05-10T07:41:49.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia84y001o5gbbubliajy5","content":"<p>##定义</p>\n<ul>\n<li>对象：属性的无序结合，每个属性存放一个原始值、对象或者函数。每个对象由类定义，定义了对象的接口（开发者访问的属性和方法），内部工作（使属性和方法发挥作用的代码）。</li>\n<li>实例：程序使用类创建对象时，生成的对象叫做类的实例。每个实例的行为相同，但是实例处理一组独立的数据。创建过程叫做实例化。</li>\n<li>ECMA-262类：类是对象的配方。</li>\n<li>ECMA-262对象：对象由特性（attribute）构成，特性可以是原始值，也可以是引用值，如果特性存放的是函数，它将被看作对象的方法，否则该特性被看错属性。</li>\n<li>引用类型：通常叫作类。在ECMAScript中，不能访问对象的物理表示，只能访问对象的引用。每次创建对象，存储在变量中的都是该对象的引用，而不是对象本身。</li>\n</ul>\n<pre><code>var a = {c:1, b:2}\nc = a\nc.c=2\nc\nObject {c: 2, b: 2}\na\nObject {c: 2, b: 2}\n</code></pre><p>所以在对于对象的操作，比如复制中，会遇到深度复制这样的问题，要确保复制的不是引用。</p>\n<p>##对象的类型</p>\n<p>###本地对象</p>\n<ul>\n<li>Array<br>主要方法有：</li>\n</ul>\n<ol>\n<li><code>join</code>、<code>split</code>、<code>slice</code>、<code>pop</code>、<code>shift</code>、<code>push</code>，Array对象的动作像一个栈，是后进先出的。通过<code>shift</code>、<code>push</code>可以使Array对象有队列一样的动作。</li>\n<li><code>sort</code>、<code>reverse</code>与数组项的顺序有关。<code>reverse</code>使数组倒序，<code>sort</code>根据数组项的值升序为他们排序。<code>sort</code>是将所有值转化为字符串，然后根据自负代码比较数组项，可以通过<code>sort（obj,fun(){}）</code>设置排序规则来进行排序。</li>\n<li><code>splice</code>用来把数据项插入数组中部，可以用来：删除<code>arr.splice(0,2)</code>、插入<code>arr.splice(2,0,&quot;insertContent&quot;)</code>、替换<code>arr.splice(2,1,&quot;replaceContent&quot;)</code>。</li>\n</ol>\n<ul>\n<li>Date<br>Date类对UTC日期和时间有很强的依赖性，需要考虑时区、夏时令等情况。并且覆盖了<code>valueOf</code>、<code>toString</code>方法。</li>\n</ul>\n<p>###内置对象</p>\n<p>定义：由ECMAScript实现提供的、独立于宿主环境的所有对象，在ECMAScript程序开始执行时出现。ECMA-262定义了两个内置对象，即Global和Math。</p>\n<ul>\n<li>Global</li>\n</ul>\n<p>Global实际上根本不存在。Global几个比较重要的方法有<code>encodeURI</code>系列，用来处理URI；<code>eval</code>用来吧参数解释为真正的ECMAScript语句，操作Json时候用到过。<br>另外，<strong>在ECMAScript中不存在独立的函数，所有函数都必须是某个对象的方法</strong>。</p>\n<p>###宿主对象</p>\n<p>定义：所有非本地对象都是宿主对象。</p>\n<ul>\n<li>this<br>this用在对象的方法中，关键字this总是只想调用该方法的对象。通过this可以在任意多个地方重用同一个函数。</li>\n</ul>\n<p>##定义类或对象</p>\n<p>###工厂方式</p>\n<pre><code>function createCar() {\n    var oTempCar = new Object;\n    oTempCar.color = &quot;red&quot;;\n    oTempCar.showColor = function() {\n        console.log(this.color)\n    };\n\n    return oTempCar;\n}\n\nvar oCar1 = createCar();\n</code></pre><p>这样可以通过调用函数来创建新对象，但是每个对象都会有一个版本的<code>showColor</code>，因此需要通过原型方式来进行定义类。</p>\n<p>###构造函数方式</p>\n<pre><code>function Car() {\n    this.color = &quot;red&quot;;\n    this.showColor = function() {\n        console.log(this.color)\n    };\n\n}\n\nvar oCar1 = new Car();\n</code></pre><p>同样地，也会重复生成函数。</p>\n<p>###原型方式</p>\n<pre><code>function Car() {\n    this.prototype.color = &quot;red&quot;;\n    this.prototype.showColor = function() {\n        console.log(this.color)\n    };\n\n}\n\nvar oCar1 = new Car();\n</code></pre><p>在调用<code>new Car()</code>时，原型的所有属性都被赋予也要创建的对象，也就是说所有的Car实例存放的都是指向<code>showColor（）</code>的指针。然而，由于都是指向同一个位置，如果改变某个实例的属性，其他所有实例的该属性都会改变。因此需要混合构造函数/原型方式来进行创建对象。</p>\n<p>###混合方式</p>\n<pre><code>function Car() {\n    this.color = &quot;red&quot;;\n}\nCar.prototype.showColor = function() {\n    console.log(this.color)\n};\n</code></pre><p>##对象修改<br>通过<code>prototype</code>可以创建新方法，重新定义已有方法。</p>\n","excerpt":"","more":"<p>##定义</p>\n<ul>\n<li>对象：属性的无序结合，每个属性存放一个原始值、对象或者函数。每个对象由类定义，定义了对象的接口（开发者访问的属性和方法），内部工作（使属性和方法发挥作用的代码）。</li>\n<li>实例：程序使用类创建对象时，生成的对象叫做类的实例。每个实例的行为相同，但是实例处理一组独立的数据。创建过程叫做实例化。</li>\n<li>ECMA-262类：类是对象的配方。</li>\n<li>ECMA-262对象：对象由特性（attribute）构成，特性可以是原始值，也可以是引用值，如果特性存放的是函数，它将被看作对象的方法，否则该特性被看错属性。</li>\n<li>引用类型：通常叫作类。在ECMAScript中，不能访问对象的物理表示，只能访问对象的引用。每次创建对象，存储在变量中的都是该对象的引用，而不是对象本身。</li>\n</ul>\n<pre><code>var a = {c:1, b:2}\nc = a\nc.c=2\nc\nObject {c: 2, b: 2}\na\nObject {c: 2, b: 2}\n</code></pre><p>所以在对于对象的操作，比如复制中，会遇到深度复制这样的问题，要确保复制的不是引用。</p>\n<p>##对象的类型</p>\n<p>###本地对象</p>\n<ul>\n<li>Array<br>主要方法有：</li>\n</ul>\n<ol>\n<li><code>join</code>、<code>split</code>、<code>slice</code>、<code>pop</code>、<code>shift</code>、<code>push</code>，Array对象的动作像一个栈，是后进先出的。通过<code>shift</code>、<code>push</code>可以使Array对象有队列一样的动作。</li>\n<li><code>sort</code>、<code>reverse</code>与数组项的顺序有关。<code>reverse</code>使数组倒序，<code>sort</code>根据数组项的值升序为他们排序。<code>sort</code>是将所有值转化为字符串，然后根据自负代码比较数组项，可以通过<code>sort（obj,fun(){}）</code>设置排序规则来进行排序。</li>\n<li><code>splice</code>用来把数据项插入数组中部，可以用来：删除<code>arr.splice(0,2)</code>、插入<code>arr.splice(2,0,&quot;insertContent&quot;)</code>、替换<code>arr.splice(2,1,&quot;replaceContent&quot;)</code>。</li>\n</ol>\n<ul>\n<li>Date<br>Date类对UTC日期和时间有很强的依赖性，需要考虑时区、夏时令等情况。并且覆盖了<code>valueOf</code>、<code>toString</code>方法。</li>\n</ul>\n<p>###内置对象</p>\n<p>定义：由ECMAScript实现提供的、独立于宿主环境的所有对象，在ECMAScript程序开始执行时出现。ECMA-262定义了两个内置对象，即Global和Math。</p>\n<ul>\n<li>Global</li>\n</ul>\n<p>Global实际上根本不存在。Global几个比较重要的方法有<code>encodeURI</code>系列，用来处理URI；<code>eval</code>用来吧参数解释为真正的ECMAScript语句，操作Json时候用到过。<br>另外，<strong>在ECMAScript中不存在独立的函数，所有函数都必须是某个对象的方法</strong>。</p>\n<p>###宿主对象</p>\n<p>定义：所有非本地对象都是宿主对象。</p>\n<ul>\n<li>this<br>this用在对象的方法中，关键字this总是只想调用该方法的对象。通过this可以在任意多个地方重用同一个函数。</li>\n</ul>\n<p>##定义类或对象</p>\n<p>###工厂方式</p>\n<pre><code>function createCar() {\n    var oTempCar = new Object;\n    oTempCar.color = &quot;red&quot;;\n    oTempCar.showColor = function() {\n        console.log(this.color)\n    };\n\n    return oTempCar;\n}\n\nvar oCar1 = createCar();\n</code></pre><p>这样可以通过调用函数来创建新对象，但是每个对象都会有一个版本的<code>showColor</code>，因此需要通过原型方式来进行定义类。</p>\n<p>###构造函数方式</p>\n<pre><code>function Car() {\n    this.color = &quot;red&quot;;\n    this.showColor = function() {\n        console.log(this.color)\n    };\n\n}\n\nvar oCar1 = new Car();\n</code></pre><p>同样地，也会重复生成函数。</p>\n<p>###原型方式</p>\n<pre><code>function Car() {\n    this.prototype.color = &quot;red&quot;;\n    this.prototype.showColor = function() {\n        console.log(this.color)\n    };\n\n}\n\nvar oCar1 = new Car();\n</code></pre><p>在调用<code>new Car()</code>时，原型的所有属性都被赋予也要创建的对象，也就是说所有的Car实例存放的都是指向<code>showColor（）</code>的指针。然而，由于都是指向同一个位置，如果改变某个实例的属性，其他所有实例的该属性都会改变。因此需要混合构造函数/原型方式来进行创建对象。</p>\n<p>###混合方式</p>\n<pre><code>function Car() {\n    this.color = &quot;red&quot;;\n}\nCar.prototype.showColor = function() {\n    console.log(this.color)\n};\n</code></pre><p>##对象修改<br>通过<code>prototype</code>可以创建新方法，重新定义已有方法。</p>\n"},{"title":"正则表达式","date":"2015-05-11T07:18:23.000Z","_content":"##基本方法\n\n* RegExp\n主要有`test()`和`exec()`两个方法。\n    * `test()`：如果给定字符串匹配这个模式，返回true，反之亦然。\n    * `exec()`：返回一个数组，数组中的第一个条目是第一个匹配；其他是反向引用。\n* String\n主要有`match()`和`search()`，另外`replace()`和`split()`也支持正则作为传入参数。\n    * `match()`：返回一个包含字符串中所有匹配的数组，其他是反向引用。\n    * `search()`：返回字符串中出现的第一个匹配的位置，然而全局匹配正则表达式在`search()`时并不起作用。\n    * `replace()`和`split()`都支持正则的匹配。\n    \n##简单模式\n* 元字符\n有`(`、`[`、`{`、`\\`、`^`、`$`、`|`、`)`、`?`、`*`、`+`、`.`。需要用`\\`进行转义，在非字面量表示的时候所有的反斜杠要用两个反斜杠来替换。\n\n* 简单类\n`/[bcf]at/`匹配所有的`bat`、`cat`和`fat`。\n\n* 负向类\n`/[^bc]at/`匹配所有含有`at`但是不以`b`和`c`开头的字符串。\n\n* 范围类\n`[a-z]`表示所有小写字母，`[num[1-4]]`这样的形式很方便。\n\n* 组合类\n是有集中其他的类组合而成的字符类。\n\n* 量词\n    * `{n,m}`表示至少n次，至多m次\n    * `?`等价于`{0,1}`\n    * `*`等价于`{0,}`\n    * `+`等价于`{1,}`\n    * `{n}`等价于`{n,n}`\n\n\n##复杂模式\n通过分组、反向引用、前瞻等一些强大的正则表达式功能，可以方便地使用正则表达式进行复杂的字符串操作。\n\n* 分组\n        \n        var str = \"dogdog\";\n        var regDog = /(dog)+/;\n        str.match(regDog);\n可以匹配字符串中多次出现的`dog`。并且，分组可以嵌套，通过嵌套和不同的组合可以实现复杂的分组。\n\n* 反向引用\n\n在表达式计算完成后，每个分组都被存放在一个特殊的地方以备将来使用，这些存储在分组中的特殊值，我们称之为反向引用。反向引用是按照从左到右的左括号字符的顺序进行创建和编号的。\n例如，`(A?(B?(C?)))`将包含三个反向引用：`(A?(B?(C?)))`、`(B?(C?))`、`(C?)`。\n\n反向引用主要有三种使用方式。\n\n1. reg.$1\n        \n        var str = \"dagdbgdcg\"\n        var reg = /(dag)(dbg)(dcg)/;\n        str.match(reg);\n        console.log(RegExp.$1);\n        \n2. /(reg)\\1/\n\n        var str = \"dagdagdog\"\n        var reg = /(dag)\\1/;\n        str.match(reg);\n        console.log(RegExp.$1);\n        \n3. replace(reg,\"$2 $1\")\n\n        var str = \"1234 2345\"\n        var reg = /(\\d{4}) (\\1)/;\n        var newStr = str.replace(reg, \"$2 $1\");\n\n这里需要注意的是对于2种的`\\1`的使用，是匹配出来的值，而不是匹配方式。另外，在左括号后加上`?:`可以创建非捕获分组，即可不存储反向引用的结果。\n\n* 候选\n`|`是正则表达式的候选操作符。\n\n        var str = \"蛤蛤和长者\";\n        var reg = /蛤蛤|长者/g;\n        str = str.replace(reg,\"*****\");\n        \n        var str = \"蛤蛤和长者\";\n        var reg = /蛤蛤|长者/g;\n        //这里的sMatch是reg匹配到的结果数组中的元素\n        str = str.replace(reg,function(sMatch){return sMatch.replace(/./g,\"*\")});\n        \n* 前瞻\n    * 正向前瞻`bed(?=room)`表示查询*接下来*出现的*是*括号中的内容\n    * 负向前瞻`room(?！red)`表示查询*接下来*出现的*不是*括号中的内容。\n    * 并且，前瞻不会出现在反向引用的结果中，分组不会考虑前瞻的存在。\n\n* 边界\n    `^`:行开头\n    `$`:行结尾\n    `\\b`:单词边界\n    `\\B`:非单词的边界\n\n* 多行模式\n`/m`表示多行模式，多行模式会改变`^`和`$`的边界行为，是的`\\n`前后也为边界。\n\n    \n","source":"_posts/js-notes4.md","raw":"title: \"正则表达式\"\ndate: 2015-05-11 15:18:23\ntags: [js,note]\n---\n##基本方法\n\n* RegExp\n主要有`test()`和`exec()`两个方法。\n    * `test()`：如果给定字符串匹配这个模式，返回true，反之亦然。\n    * `exec()`：返回一个数组，数组中的第一个条目是第一个匹配；其他是反向引用。\n* String\n主要有`match()`和`search()`，另外`replace()`和`split()`也支持正则作为传入参数。\n    * `match()`：返回一个包含字符串中所有匹配的数组，其他是反向引用。\n    * `search()`：返回字符串中出现的第一个匹配的位置，然而全局匹配正则表达式在`search()`时并不起作用。\n    * `replace()`和`split()`都支持正则的匹配。\n    \n##简单模式\n* 元字符\n有`(`、`[`、`{`、`\\`、`^`、`$`、`|`、`)`、`?`、`*`、`+`、`.`。需要用`\\`进行转义，在非字面量表示的时候所有的反斜杠要用两个反斜杠来替换。\n\n* 简单类\n`/[bcf]at/`匹配所有的`bat`、`cat`和`fat`。\n\n* 负向类\n`/[^bc]at/`匹配所有含有`at`但是不以`b`和`c`开头的字符串。\n\n* 范围类\n`[a-z]`表示所有小写字母，`[num[1-4]]`这样的形式很方便。\n\n* 组合类\n是有集中其他的类组合而成的字符类。\n\n* 量词\n    * `{n,m}`表示至少n次，至多m次\n    * `?`等价于`{0,1}`\n    * `*`等价于`{0,}`\n    * `+`等价于`{1,}`\n    * `{n}`等价于`{n,n}`\n\n\n##复杂模式\n通过分组、反向引用、前瞻等一些强大的正则表达式功能，可以方便地使用正则表达式进行复杂的字符串操作。\n\n* 分组\n        \n        var str = \"dogdog\";\n        var regDog = /(dog)+/;\n        str.match(regDog);\n可以匹配字符串中多次出现的`dog`。并且，分组可以嵌套，通过嵌套和不同的组合可以实现复杂的分组。\n\n* 反向引用\n\n在表达式计算完成后，每个分组都被存放在一个特殊的地方以备将来使用，这些存储在分组中的特殊值，我们称之为反向引用。反向引用是按照从左到右的左括号字符的顺序进行创建和编号的。\n例如，`(A?(B?(C?)))`将包含三个反向引用：`(A?(B?(C?)))`、`(B?(C?))`、`(C?)`。\n\n反向引用主要有三种使用方式。\n\n1. reg.$1\n        \n        var str = \"dagdbgdcg\"\n        var reg = /(dag)(dbg)(dcg)/;\n        str.match(reg);\n        console.log(RegExp.$1);\n        \n2. /(reg)\\1/\n\n        var str = \"dagdagdog\"\n        var reg = /(dag)\\1/;\n        str.match(reg);\n        console.log(RegExp.$1);\n        \n3. replace(reg,\"$2 $1\")\n\n        var str = \"1234 2345\"\n        var reg = /(\\d{4}) (\\1)/;\n        var newStr = str.replace(reg, \"$2 $1\");\n\n这里需要注意的是对于2种的`\\1`的使用，是匹配出来的值，而不是匹配方式。另外，在左括号后加上`?:`可以创建非捕获分组，即可不存储反向引用的结果。\n\n* 候选\n`|`是正则表达式的候选操作符。\n\n        var str = \"蛤蛤和长者\";\n        var reg = /蛤蛤|长者/g;\n        str = str.replace(reg,\"*****\");\n        \n        var str = \"蛤蛤和长者\";\n        var reg = /蛤蛤|长者/g;\n        //这里的sMatch是reg匹配到的结果数组中的元素\n        str = str.replace(reg,function(sMatch){return sMatch.replace(/./g,\"*\")});\n        \n* 前瞻\n    * 正向前瞻`bed(?=room)`表示查询*接下来*出现的*是*括号中的内容\n    * 负向前瞻`room(?！red)`表示查询*接下来*出现的*不是*括号中的内容。\n    * 并且，前瞻不会出现在反向引用的结果中，分组不会考虑前瞻的存在。\n\n* 边界\n    `^`:行开头\n    `$`:行结尾\n    `\\b`:单词边界\n    `\\B`:非单词的边界\n\n* 多行模式\n`/m`表示多行模式，多行模式会改变`^`和`$`的边界行为，是的`\\n`前后也为边界。\n\n    \n","slug":"js-notes4","published":1,"updated":"2015-05-11T14:22:29.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cio1ia850001p5gbb193acf7u","content":"<p>##基本方法</p>\n<ul>\n<li>RegExp<br>主要有<code>test()</code>和<code>exec()</code>两个方法。<ul>\n<li><code>test()</code>：如果给定字符串匹配这个模式，返回true，反之亦然。</li>\n<li><code>exec()</code>：返回一个数组，数组中的第一个条目是第一个匹配；其他是反向引用。</li>\n</ul>\n</li>\n<li>String<br>主要有<code>match()</code>和<code>search()</code>，另外<code>replace()</code>和<code>split()</code>也支持正则作为传入参数。<ul>\n<li><code>match()</code>：返回一个包含字符串中所有匹配的数组，其他是反向引用。</li>\n<li><code>search()</code>：返回字符串中出现的第一个匹配的位置，然而全局匹配正则表达式在<code>search()</code>时并不起作用。</li>\n<li><code>replace()</code>和<code>split()</code>都支持正则的匹配。</li>\n</ul>\n</li>\n</ul>\n<p>##简单模式</p>\n<ul>\n<li><p>元字符<br>有<code>(</code>、<code>[</code>、<code>{</code>、<code>\\</code>、<code>^</code>、<code>$</code>、<code>|</code>、<code>)</code>、<code>?</code>、<code>*</code>、<code>+</code>、<code>.</code>。需要用<code>\\</code>进行转义，在非字面量表示的时候所有的反斜杠要用两个反斜杠来替换。</p>\n</li>\n<li><p>简单类<br><code>/[bcf]at/</code>匹配所有的<code>bat</code>、<code>cat</code>和<code>fat</code>。</p>\n</li>\n<li><p>负向类<br><code>/[^bc]at/</code>匹配所有含有<code>at</code>但是不以<code>b</code>和<code>c</code>开头的字符串。</p>\n</li>\n<li><p>范围类<br><code>[a-z]</code>表示所有小写字母，<code>[num[1-4]]</code>这样的形式很方便。</p>\n</li>\n<li><p>组合类<br>是有集中其他的类组合而成的字符类。</p>\n</li>\n<li><p>量词</p>\n<ul>\n<li><code>{n,m}</code>表示至少n次，至多m次</li>\n<li><code>?</code>等价于<code>{0,1}</code></li>\n<li><code>*</code>等价于<code>{0,}</code></li>\n<li><code>+</code>等价于<code>{1,}</code></li>\n<li><code>{n}</code>等价于<code>{n,n}</code></li>\n</ul>\n</li>\n</ul>\n<p>##复杂模式<br>通过分组、反向引用、前瞻等一些强大的正则表达式功能，可以方便地使用正则表达式进行复杂的字符串操作。</p>\n<ul>\n<li><p>分组</p>\n<pre><code>var str = &quot;dogdog&quot;;\nvar regDog = /(dog)+/;\nstr.match(regDog);\n</code></pre><p>可以匹配字符串中多次出现的<code>dog</code>。并且，分组可以嵌套，通过嵌套和不同的组合可以实现复杂的分组。</p>\n</li>\n<li><p>反向引用</p>\n</li>\n</ul>\n<p>在表达式计算完成后，每个分组都被存放在一个特殊的地方以备将来使用，这些存储在分组中的特殊值，我们称之为反向引用。反向引用是按照从左到右的左括号字符的顺序进行创建和编号的。<br>例如，<code>(A?(B?(C?)))</code>将包含三个反向引用：<code>(A?(B?(C?)))</code>、<code>(B?(C?))</code>、<code>(C?)</code>。</p>\n<p>反向引用主要有三种使用方式。</p>\n<ol>\n<li><p>reg.$1</p>\n<pre><code>var str = &quot;dagdbgdcg&quot;\nvar reg = /(dag)(dbg)(dcg)/;\nstr.match(reg);\nconsole.log(RegExp.$1);\n</code></pre></li>\n<li><p>/(reg)\\1/</p>\n<pre><code>var str = &quot;dagdagdog&quot;\nvar reg = /(dag)\\1/;\nstr.match(reg);\nconsole.log(RegExp.$1);\n</code></pre></li>\n<li><p>replace(reg,”$2 $1”)</p>\n<pre><code>var str = &quot;1234 2345&quot;\nvar reg = /(\\d{4}) (\\1)/;\nvar newStr = str.replace(reg, &quot;$2 $1&quot;);\n</code></pre></li>\n</ol>\n<p>这里需要注意的是对于2种的<code>\\1</code>的使用，是匹配出来的值，而不是匹配方式。另外，在左括号后加上<code>?:</code>可以创建非捕获分组，即可不存储反向引用的结果。</p>\n<ul>\n<li><p>候选<br><code>|</code>是正则表达式的候选操作符。</p>\n<pre><code>var str = &quot;蛤蛤和长者&quot;;\nvar reg = /蛤蛤|长者/g;\nstr = str.replace(reg,&quot;*****&quot;);\n\nvar str = &quot;蛤蛤和长者&quot;;\nvar reg = /蛤蛤|长者/g;\n//这里的sMatch是reg匹配到的结果数组中的元素\nstr = str.replace(reg,function(sMatch){return sMatch.replace(/./g,&quot;*&quot;)});\n</code></pre></li>\n<li><p>前瞻</p>\n<ul>\n<li>正向前瞻<code>bed(?=room)</code>表示查询<em>接下来</em>出现的<em>是</em>括号中的内容</li>\n<li>负向前瞻<code>room(?！red)</code>表示查询<em>接下来</em>出现的<em>不是</em>括号中的内容。</li>\n<li>并且，前瞻不会出现在反向引用的结果中，分组不会考虑前瞻的存在。</li>\n</ul>\n</li>\n<li><p>边界<br>  <code>^</code>:行开头<br>  <code>$</code>:行结尾<br>  <code>\\b</code>:单词边界<br>  <code>\\B</code>:非单词的边界</p>\n</li>\n<li><p>多行模式<br><code>/m</code>表示多行模式，多行模式会改变<code>^</code>和<code>$</code>的边界行为，是的<code>\\n</code>前后也为边界。</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>##基本方法</p>\n<ul>\n<li>RegExp<br>主要有<code>test()</code>和<code>exec()</code>两个方法。<ul>\n<li><code>test()</code>：如果给定字符串匹配这个模式，返回true，反之亦然。</li>\n<li><code>exec()</code>：返回一个数组，数组中的第一个条目是第一个匹配；其他是反向引用。</li>\n</ul>\n</li>\n<li>String<br>主要有<code>match()</code>和<code>search()</code>，另外<code>replace()</code>和<code>split()</code>也支持正则作为传入参数。<ul>\n<li><code>match()</code>：返回一个包含字符串中所有匹配的数组，其他是反向引用。</li>\n<li><code>search()</code>：返回字符串中出现的第一个匹配的位置，然而全局匹配正则表达式在<code>search()</code>时并不起作用。</li>\n<li><code>replace()</code>和<code>split()</code>都支持正则的匹配。</li>\n</ul>\n</li>\n</ul>\n<p>##简单模式</p>\n<ul>\n<li><p>元字符<br>有<code>(</code>、<code>[</code>、<code>{</code>、<code>\\</code>、<code>^</code>、<code>$</code>、<code>|</code>、<code>)</code>、<code>?</code>、<code>*</code>、<code>+</code>、<code>.</code>。需要用<code>\\</code>进行转义，在非字面量表示的时候所有的反斜杠要用两个反斜杠来替换。</p>\n</li>\n<li><p>简单类<br><code>/[bcf]at/</code>匹配所有的<code>bat</code>、<code>cat</code>和<code>fat</code>。</p>\n</li>\n<li><p>负向类<br><code>/[^bc]at/</code>匹配所有含有<code>at</code>但是不以<code>b</code>和<code>c</code>开头的字符串。</p>\n</li>\n<li><p>范围类<br><code>[a-z]</code>表示所有小写字母，<code>[num[1-4]]</code>这样的形式很方便。</p>\n</li>\n<li><p>组合类<br>是有集中其他的类组合而成的字符类。</p>\n</li>\n<li><p>量词</p>\n<ul>\n<li><code>{n,m}</code>表示至少n次，至多m次</li>\n<li><code>?</code>等价于<code>{0,1}</code></li>\n<li><code>*</code>等价于<code>{0,}</code></li>\n<li><code>+</code>等价于<code>{1,}</code></li>\n<li><code>{n}</code>等价于<code>{n,n}</code></li>\n</ul>\n</li>\n</ul>\n<p>##复杂模式<br>通过分组、反向引用、前瞻等一些强大的正则表达式功能，可以方便地使用正则表达式进行复杂的字符串操作。</p>\n<ul>\n<li><p>分组</p>\n<pre><code>var str = &quot;dogdog&quot;;\nvar regDog = /(dog)+/;\nstr.match(regDog);\n</code></pre><p>可以匹配字符串中多次出现的<code>dog</code>。并且，分组可以嵌套，通过嵌套和不同的组合可以实现复杂的分组。</p>\n</li>\n<li><p>反向引用</p>\n</li>\n</ul>\n<p>在表达式计算完成后，每个分组都被存放在一个特殊的地方以备将来使用，这些存储在分组中的特殊值，我们称之为反向引用。反向引用是按照从左到右的左括号字符的顺序进行创建和编号的。<br>例如，<code>(A?(B?(C?)))</code>将包含三个反向引用：<code>(A?(B?(C?)))</code>、<code>(B?(C?))</code>、<code>(C?)</code>。</p>\n<p>反向引用主要有三种使用方式。</p>\n<ol>\n<li><p>reg.$1</p>\n<pre><code>var str = &quot;dagdbgdcg&quot;\nvar reg = /(dag)(dbg)(dcg)/;\nstr.match(reg);\nconsole.log(RegExp.$1);\n</code></pre></li>\n<li><p>/(reg)\\1/</p>\n<pre><code>var str = &quot;dagdagdog&quot;\nvar reg = /(dag)\\1/;\nstr.match(reg);\nconsole.log(RegExp.$1);\n</code></pre></li>\n<li><p>replace(reg,”$2 $1”)</p>\n<pre><code>var str = &quot;1234 2345&quot;\nvar reg = /(\\d{4}) (\\1)/;\nvar newStr = str.replace(reg, &quot;$2 $1&quot;);\n</code></pre></li>\n</ol>\n<p>这里需要注意的是对于2种的<code>\\1</code>的使用，是匹配出来的值，而不是匹配方式。另外，在左括号后加上<code>?:</code>可以创建非捕获分组，即可不存储反向引用的结果。</p>\n<ul>\n<li><p>候选<br><code>|</code>是正则表达式的候选操作符。</p>\n<pre><code>var str = &quot;蛤蛤和长者&quot;;\nvar reg = /蛤蛤|长者/g;\nstr = str.replace(reg,&quot;*****&quot;);\n\nvar str = &quot;蛤蛤和长者&quot;;\nvar reg = /蛤蛤|长者/g;\n//这里的sMatch是reg匹配到的结果数组中的元素\nstr = str.replace(reg,function(sMatch){return sMatch.replace(/./g,&quot;*&quot;)});\n</code></pre></li>\n<li><p>前瞻</p>\n<ul>\n<li>正向前瞻<code>bed(?=room)</code>表示查询<em>接下来</em>出现的<em>是</em>括号中的内容</li>\n<li>负向前瞻<code>room(?！red)</code>表示查询<em>接下来</em>出现的<em>不是</em>括号中的内容。</li>\n<li>并且，前瞻不会出现在反向引用的结果中，分组不会考虑前瞻的存在。</li>\n</ul>\n</li>\n<li><p>边界<br>  <code>^</code>:行开头<br>  <code>$</code>:行结尾<br>  <code>\\b</code>:单词边界<br>  <code>\\B</code>:非单词的边界</p>\n</li>\n<li><p>多行模式<br><code>/m</code>表示多行模式，多行模式会改变<code>^</code>和<code>$</code>的边界行为，是的<code>\\n</code>前后也为边界。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cio1ia83e00045gbbb0iskrn1","category_id":"cio1ia83g00055gbb49h223yp","_id":"cio1ia842000j5gbb67rn7dbg"},{"post_id":"cio1ia840000h5gbbnrn6uvtk","category_id":"cio1ia83g00055gbb49h223yp","_id":"cio1ia844000m5gbb2yswpnqj"},{"post_id":"cio1ia83h00065gbbr3wxppat","category_id":"cio1ia83g00055gbb49h223yp","_id":"cio1ia844000n5gbbyq3yngwg"},{"post_id":"cio1ia83900025gbbdrgayj2d","category_id":"cio1ia83g00055gbb49h223yp","_id":"cio1ia845000p5gbb265uelts"},{"post_id":"cio1ia83900025gbbdrgayj2d","category_id":"cio1ia842000k5gbb04axr8f3","_id":"cio1ia845000q5gbb2p8ouugh"}],"PostTag":[{"post_id":"cio1ia83200005gbbshifsj64","tag_id":"cio1ia83b00035gbbmb61tnl0","_id":"cio1ia83o00095gbb3q2i0npp"},{"post_id":"cio1ia83s000c5gbbsfmhmtmw","tag_id":"cio1ia83b00035gbbmb61tnl0","_id":"cio1ia83z000g5gbbhtsdicmj"},{"post_id":"cio1ia83900025gbbdrgayj2d","tag_id":"cio1ia83j00075gbbvsoh0bps","_id":"cio1ia846000s5gbb0b3fj7b8"},{"post_id":"cio1ia83900025gbbdrgayj2d","tag_id":"cio1ia83u000d5gbbqh6tri5p","_id":"cio1ia846000t5gbbi86v1m0g"},{"post_id":"cio1ia83900025gbbdrgayj2d","tag_id":"cio1ia841000i5gbbr1z6z0cy","_id":"cio1ia847000v5gbbygowlhy6"},{"post_id":"cio1ia83900025gbbdrgayj2d","tag_id":"cio1ia844000l5gbbfb26bbn6","_id":"cio1ia847000w5gbbh65gqlzt"},{"post_id":"cio1ia83900025gbbdrgayj2d","tag_id":"cio1ia845000o5gbbbimtjag5","_id":"cio1ia848000y5gbbk8fsynul"},{"post_id":"cio1ia83e00045gbbb0iskrn1","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia848000z5gbb8wf7yvp8"},{"post_id":"cio1ia83e00045gbbb0iskrn1","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia84900115gbbkjzgro1s"},{"post_id":"cio1ia83h00065gbbr3wxppat","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia84a00135gbbnowsor1a"},{"post_id":"cio1ia83h00065gbbr3wxppat","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia84a00145gbb2x6wj45e"},{"post_id":"cio1ia83k00085gbb40pg0xpv","tag_id":"cio1ia84900125gbb74qjrly3","_id":"cio1ia84d00185gbbxdw7rjzq"},{"post_id":"cio1ia83k00085gbb40pg0xpv","tag_id":"cio1ia84b00155gbbia1bmob8","_id":"cio1ia84d00195gbbwb00s3n6"},{"post_id":"cio1ia83k00085gbb40pg0xpv","tag_id":"cio1ia84b00165gbbngkztqhk","_id":"cio1ia84f001b5gbbvrr904yi"},{"post_id":"cio1ia83p000a5gbbw4oxt9p3","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia84h001d5gbbrmqx4du4"},{"post_id":"cio1ia83p000a5gbbw4oxt9p3","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia84h001e5gbbwtk8xqvh"},{"post_id":"cio1ia83v000e5gbb9bed6ddy","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia84i001h5gbbw255dp16"},{"post_id":"cio1ia83v000e5gbb9bed6ddy","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia84j001i5gbb5svxvnuj"},{"post_id":"cio1ia840000h5gbbnrn6uvtk","tag_id":"cio1ia84i001g5gbbsgli85u9","_id":"cio1ia84m001l5gbbi5y7slom"},{"post_id":"cio1ia840000h5gbbnrn6uvtk","tag_id":"cio1ia84j001j5gbbgbseihy1","_id":"cio1ia84m001m5gbbvkk9yi91"},{"post_id":"cio1ia840000h5gbbnrn6uvtk","tag_id":"cio1ia841000i5gbbr1z6z0cy","_id":"cio1ia84n001n5gbbh4ziluct"},{"post_id":"cio1ia84y001o5gbbubliajy5","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia852001q5gbbhcqfa7bz"},{"post_id":"cio1ia84y001o5gbbubliajy5","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia853001r5gbbetkizciu"},{"post_id":"cio1ia850001p5gbb193acf7u","tag_id":"cio1ia846000r5gbblvcppav8","_id":"cio1ia854001s5gbb9x1l7p38"},{"post_id":"cio1ia850001p5gbb193acf7u","tag_id":"cio1ia847000u5gbb1yk3cmux","_id":"cio1ia854001t5gbbq4e2ncbb"}],"Tag":[{"name":"日记","_id":"cio1ia83b00035gbbmb61tnl0"},{"name":"Redux","_id":"cio1ia83j00075gbbvsoh0bps"},{"name":"React","_id":"cio1ia83u000d5gbbqh6tri5p"},{"name":"webpack","_id":"cio1ia841000i5gbbr1z6z0cy"},{"name":"ftp","_id":"cio1ia844000l5gbbfb26bbn6"},{"name":"node","_id":"cio1ia845000o5gbbbimtjag5"},{"name":"js","_id":"cio1ia846000r5gbblvcppav8"},{"name":"note","_id":"cio1ia847000u5gbb1yk3cmux"},{"name":"电力","_id":"cio1ia84900125gbb74qjrly3"},{"name":"配电网","_id":"cio1ia84b00155gbbia1bmob8"},{"name":"算法","_id":"cio1ia84b00165gbbngkztqhk"},{"name":"工程化","_id":"cio1ia84i001g5gbbsgli85u9"},{"name":"gulp","_id":"cio1ia84j001j5gbbgbseihy1"}]}}